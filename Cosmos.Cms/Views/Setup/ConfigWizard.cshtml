@addTagHelper *, Kendo.Mvc
@using Kendo.Mvc.UI
@model ConfigureIndexViewModel
@{
    ViewData["Title"] = "Configuration Wizard";
    var canUseSecrets = ((bool)ViewData["CanSaveToSecretsManager"]) ? "" : "style='display:none'";
}
<script src="~/js/clipboard.min.js"></script>

<style>
    .badge-hint {
        font-weight: bold !important;
        min-height: 11px !important;
    }
</style>

<div class="container mt-5 pt-2">
    <div class="row">
        <div class="col">
            <h3>@ViewData["Title"]</h3>
            <hr />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <div asp-validation-summary="All" class="text-warning"></div>

            @if (ViewData["jsonObject"] != null)
            {
                <div class="row">
                    <div class="col-12">
                        @if (Model.CanSaveSecrets)
                        {
                            <h5>Changes Saved.</h5>
                            <hr />
                        }
                        <a class="btn btn-sm btn-success" href="javascript:copyJson()" title="Click to copy JSON">Click to copy C/CMS configuration <span class="fa fa-clipboard"></span></a>
                        <textarea id="jsonData" style="display: none">@(Html.Raw(ViewData["jsonObject"]))</textarea>
                    </div>
                </div>
            }
            <div>
                @(Html.Kendo().Wizard()
                .Name("wizard")
                .Events(ev => ev.Done("onDone"))
                .Tag("form")
                .HtmlAttributes(new {novalidate = "", method = "post", action = Url.Action("ConfigWizard", "Setup")})
                .Steps(s =>
                {
                if (ViewData["SkipBegin"] == null)
                {
                s.Add().Title("Begin").Buttons(b => b.Next())
                .Content("<div>" +
                "<h3>Configuration Editor Wizard</h3>" +
                "<p>This wizard allows you to view and edit the configuration of this website.</p>"  +
                "<hr />" +
                "<div class='input-group mb-3'><button type='button' data-role='button' class='k-button k-button-md k-button-rectangle k-rounded-md k-button-solid k-button-solid-primary' role='button' aria-disabled='false' tabindex='0' data-wizard-next=''>Begin editing configuration <i class='fa fa-circle-right'></i></button></div>" +
                "</div>" +
                "<p>Load an alternate configuration:" +
                
                "<div class='row' style='max-width:98%'>" +
                "<div class='col'>" +
                "<div " + canUseSecrets + "><p>Load configuration from secret (enter name):</p>" +

                "<div class='input-group mb-3'><div class='btn btn-secondary'><span class='k-icon k-i-lock' title='View or hide secret'></span></div>" +
                "<input class='form-control' id='idSecretName' title='Enter another secret name here to change.' />" +
                "<button id='btnLoadSecret' class='btn btn-primary' onclick='loadSecret()' type='button' title='Click to load config from new secret.' id='button-addon2'>Load</button>" +
                "</div></div>" +

                "</div>"  +
                "<div class='col'>" +

                "<p>Paste configuration JSON string:</p>" +
                
                "<div class='input-group mb-3'>" +
                "<div class='btn btn-secondary'><span class='k-icon k-i-lock tog-secret' title='View or hide secret' toggle='ImportJson'></span></div>" +
                "<input class='form-control' id='ImportJson' name='ImportJson' value='' placeholder='Edit alternative configuration by pasting it here.' />" +
                "<button class='btn btn-primary' type='submit' title='Click to load JSON into form below.' id='button-addon2'>Load</button>" +
                "</div>" +

                "</div>"  +
                "</div>");
                }

                s.Add<ConfigureIndexViewModel>()
                .Title("General")
                .Form(f => f
                .Layout("grid")
                .Grid(g => g.Cols(2).Gutter(20))
                .Validatable(v =>
                {
                v.ValidateOnBlur(true);
                v.ValidationSummary(vs => vs.Enable(true));
                })
                .FormData(Model)
                .Items(items =>
                {
                items.Add().ColSpan(2).Field(p => p.SiteSettings.PublisherUrl).Type("Url").Label("Website URL")
                .Hint("This is the website address, or URL, that the public will use to access this website.<br /><br />Notes: <ul><li>The 'editor' URL will be different than the above and does not need to be set here.</li><li>See <a target='_blank' href='https://cosmos.azureedge.net'>documentation</a> for hosting website in multiple clouds with one web address or URL.</li></ul>");

                items.Add().ColSpan(2).Field(p => p.SiteSettings.AllowedFileTypes).Label("Allowed File Types")
                .Hint("List of file extensions that can be uploaded to storage.");

                items.Add().ColSpan(2).Field(p => p.SiteSettings.ContentSecurityPolicy).Label("Content Security Policy (CSP)")
                .Hint("See <a href='https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP' target='_blank'>documentation</a> to learn how to set this.");

                items.Add().ColSpan(2).Field(p => p.SiteSettings.XFrameOptions).Label("X Frame Options")
                .Hint("See <a href='https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options' target='_blank'>documentation</a> to learn how to set this.");

                items.AddGroup()
                .Layout("grid")
                .Label("General Settings")
                .Grid(g => g.Cols(1).Gutter(10)).Items(gi =>
                {
                gi.Add().Field(p => p.SecretName).Title("Environment Variable")
                .Hint("<span class='badge bg-danger badge-hint'>DANGER!</span> This is the name of the secret that holds your configuration. For sites in production it is highly recommended that you use a different secret name.");

                gi.Add().Field(p => p.SiteSettings.AllowSetup).Editor(e => e.Switch())
                .Hint("Allows setting up a new website.<br /><br /><span class='badge bg-success badge-hint'>TIP:</span> To improve security disable this setting after setup complete.");

                gi.Add().Field(p => p.SiteSettings.AllowReset).Editor(e => e.Switch())
                .Hint("<span class='badge bg-danger badge-hint'>DANGER!</span> This setting enables a 'factory reset' that removes everything including users, custom layouts, themes, pages and uploaded files.");
                });
                items.AddGroup()
                .Label("Email Setup/Security")
                .Layout("grid")
                .Grid(g => g.Cols(1).Gutter(10)).Items(gi =>
                {
                gi.Add().Field(p => p.SendGridConfig.EmailFrom).Label("From Email Address").Hint("System generated emails use this from address.");
                gi.Add().Field(p => p.SendGridConfig.SendGridKey).Label("SendGrid Key").Hint("SendGrid account key.");
                gi.Add().Field(p => p.SecretKey).Label("Communication Key").Hint("Secret key used for communication between editors.");
                });
                })
                ).Buttons(b =>
                {
                b.Previous();
                b.Next();
                });

                s.Add<ConfigureIndexViewModel>()
                .Title("Authentication")
                .Form(f => f
                .Validatable(v =>
                {
                v.ValidateOnBlur(true);
                v.ValidationSummary(vs => vs.Enable(true));
                })
                .FormData(Model)
                .Layout("grid")
                .Grid(g => g.Cols(2).Gutter(20))
                .Items(items =>
                {
                items.AddGroup().Layout("grid").ColSpan(1).Label("C/CMS").Items(gi =>
                {
                gi.Add().Field(p => p.AuthenticationConfig.AllowLocalRegistration)
                .Editor(e => e.Switch().Checked(Model.AuthenticationConfig.AllowLocalRegistration.HasValue ? Model.AuthenticationConfig.AllowLocalRegistration.Value : false))
                .Label("Login in C/CMS")
                .Hint("This settings allows logins with the C/CMS.<br /><br />" +
                "<span class='badge bg-success badge-hint'>GENERAL TIPS:</span>" +
                "<ul>" +
                "<li>Only those logins configured here will appear on the user registration and login pages.</li>" +
                "<li>At least one login (C/CMS, Google, Microsoft, or Facebook) is required.</li>" +
                "<li>Enable C/CMS if any of your users cannot use Google, Microsoft or Facebook logins.</li>" +
                "</ul>"
                );
                });
                items.AddGroup().Layout("grid").ColSpan(1).Label("Google").Items(gi =>
                {
                gi.Add().Field(p => p.AuthenticationConfig.Google.ClientId).Label("Client Id");
                gi.Add().Field(p => p.AuthenticationConfig.Google.ClientSecret).Label("Client Secret")
                .Hint("See <a target='_blank' href='https://cosmos.azureedge.net/external_authentication_configuration#GoogleOAuth'>documentation</a> to learn how to get the ID and Secret above from Google.");
                });
                items.AddGroup().Layout("grid").ColSpan(1).Label("Microsoft").Items(gi =>
                {
                gi.Add().Field(p => p.AuthenticationConfig.Microsoft.ClientId).Label("Client Id");
                gi.Add().Field(p => p.AuthenticationConfig.Microsoft.ClientSecret).Label("Client Secret")
                .Hint("See <a target='_blank' href='https://cosmos.azureedge.net/external_authentication_configuration#MicrosoftOAuth'>documentation</a> to learn how to get the ID and Secret above from Google.");
                });
                items.AddGroup().Layout("grid").ColSpan(1).Label("Facebook").Items(gi =>
                {
                gi.Add().Field(p => p.AuthenticationConfig.Facebook.AppId).Label("App Id");
                gi.Add().Field(p => p.AuthenticationConfig.Facebook.AppSecret).Label("App Secret")
                .Hint("See <a target='_blank' href='https://cosmos.azureedge.net/external_authentication_configuration#FacebookOAuth'>documentation</a> to learn how to get the ID and Secret above from Facebook.");
                });
                })
                ).Buttons(b =>
                {
                b.Previous();
                b.Next();
                });

                s.Add<ConfigureIndexViewModel>().Title("Editors").Buttons(b =>
                {
                b.Previous();
                b.Next();
                })
                .Form(f => f
                .Validatable(v =>
                {
                v.ValidateOnBlur(true);
                v.ValidationSummary(vs => vs.Enable(true));
                })
                .FormData(Model)
                .Items(i => i.Add()
                .Field(f => f.EditorUrlsJson)
                .Label("Editor URLs")
                .Hint("List the URLs to your editors here.")
                .EditorTemplateId("editorUrls")));

                s.Add<ConfigureIndexViewModel>().Title("Databases").Buttons(b =>
                {
                b.Previous();
                b.Next();
                })
                .Form(f => f
                .Validatable(v =>
                {
                v.ValidateOnBlur(true);
                v.ValidationSummary(vs => vs.Enable(true));
                })
                .FormData(Model)
                .Items(i => i.Add()
                .Field(f => f.SqlConnectionsJson)
                .Label("Database Connections")
                .Hint("When more than one database, set one as primary.")
                .EditorTemplateId("sqlConnTemplate")));

                s.Add<ConfigureIndexViewModel>().Title("Storage").Buttons(b =>
                {
                b.Previous();
                b.Next();
                })
                .Form(f => f
                .Validatable(v =>
                {
                v.ValidateOnBlur(true);
                v.ValidationSummary(vs => vs.Enable(true));
                })
                .FormData(Model)
                .Items(items =>
                {
                items.Add()
                .Field(p => p.SiteSettings.BlobPublicUrl)
                .Label("Public URL of File Storage")
                .Hint("This is the public 'root' URL of your file storage.");

                items.Add()
                .Field(p => p.SiteSettings.AllowedFileTypes)
                .Label("Allowed File Types")
                .Hint("List of file extensions that can be uploaded to storage.");

                items.AddGroup()
                .Label("Azure Storage")
                .Items(i => i.Add()
                .Field(p => p.AzureBlobConnectionsJson)
                .Label("Connections")
                .EditorTemplateId("azureBlobConnTemplate"));

                items.AddGroup()
                .Label("Amazon Storage")
                .Items(i => i.Add()
                .Field(p => p.AwsS3ConnectionsJson)
                .Label("Connections")
                .EditorTemplateId("awsBlobConnTemplate"));
                })
                );

                s.Add<ConfigureIndexViewModel>()
                .Title("CDN")
                .Form(f => f
                .Validatable(v =>
                {
                v.ValidateOnBlur(true);
                v.ValidationSummary(vs => vs.Enable(true));
                })
                .FormData(Model)
                .Items(items =>
                {
                items.Add().Field(p => p.CdnConfig.CacheDuration).Editor(ed => ed.NumericTextBox().Decimals(0).Format("g"))
                .Label("CDN cache duration")
                .Hint("CDN to cache length in seconds before refreshing for new content.<br /><br />" +
                "C/CMS supports two CDN API's:<br /><br />" +
                "<ul>" +
                "<li>Akamai Fast Purge API v3</li>" +
                "<li>Azure API which can be used with these CDNs:" +
                "<ul>" +
                "<li>Akamai</li>" +
                "<li>Microsoft</li>" +
                "<li>Verizon</li>" +
                "</ul>" +
                "</li>");
                items.AddGroup().Label("Akamai CDN").Items(item =>
                {
                item.Add().Field(f => f.CdnConfig.AkamaiContextConfig.CpCode).Label("CP Code");
                item.Add().Field(f => f.CdnConfig.AkamaiContextConfig.UrlRoot).Label("URL of Root End Point");
                item.Add().Field(f => f.CdnConfig.AkamaiContextConfig.AkamaiHost).Label("API Host Name");
                item.Add().Field(f => f.CdnConfig.AkamaiContextConfig.AccessToken).Label("Access Token");
                item.Add().Field(f => f.CdnConfig.AkamaiContextConfig.ClientToken).Label("Access Token");
                item.Add().Field(f => f.CdnConfig.AkamaiContextConfig.Secret).Label("Akamai Secret");
                });
                items.AddGroup().Label("Azure CDN").Items(item =>
                {
                item.Add().Field(f => f.CdnConfig.AzureCdnConfig.CdnProvider).Label("CDN Provider")
                .Editor(ed => ed.DropDownList()
                .DataTextField("Text")
                .DataValueField("Value")
                .OptionLabel("Select CDN provider ...")
                .Template("<span style='min-width:200px'>#: data.Text # (#: data.Value #)</span>")
                .HtmlAttributes(new {style = "width: 100%"})
                .AutoBind(true)
                .Filter(FilterType.Contains)
                .BindTo(new List<SelectListItem>
                {
                new()
                {
                Text = "Standard Akamai",
                Value = "StandardAkamai"
                },
                new()
                {
                Text = "Standard Microsoft",
                Value = "StandardMicrosoft"
                },
                new()
                {
                Text = "Standard Verizon",
                Value = "StandardVerizon"
                },
                new()
                {
                Text = "Premium Verizon",
                Value = "PremiumVerizon"
                }
                }));

                item.Add().Field(f => f.CdnConfig.AzureCdnConfig.TenantId).Label("Tenant ID");
                item.Add().Field(f => f.CdnConfig.AzureCdnConfig.TenantDomainName).Label("Tenant Domain Name");
                item.Add().Field(f => f.CdnConfig.AzureCdnConfig.SubscriptionId).Label("Subscription ID");
                item.Add().Field(f => f.CdnConfig.AzureCdnConfig.ResourceGroup).Label("Resource Group");
                item.Add().Field(f => f.CdnConfig.AzureCdnConfig.CdnProfileName).Label("CDN Profile Name");
                item.Add().Field(f => f.CdnConfig.AzureCdnConfig.EndPointName).Label("End Point Name");
                item.Add().Field(f => f.CdnConfig.AzureCdnConfig.ClientId).Label("Client ID");
                item.Add().Field(f => f.CdnConfig.AzureCdnConfig.ClientSecret).Label("Client Secret");
                });
                })
                ).Buttons(b =>
                {
                b.Previous();
                b.Next();
                });

                s.Add<ConfigureIndexViewModel>().Title("Translate").Buttons(b =>
                {
                b.Previous();
                b.Next();
                })
                .Form(f => f
                .Validatable(v =>
                {
                v.ValidateOnBlur(true);
                v.ValidationSummary(vs => vs.Enable(true));
                })
                .FormData(Model)
                .Items(items =>
                {
                items.Add()
                .Field(p => p.GoogleCloudAuthConfig.ServiceType)
                .Label("Service Type")
                .Hint("Default value is 'service_account.'");

                items.Add()
                .Field(p => p.GoogleCloudAuthConfig.ProjectId)
                .Label("Project Id")
                .Hint("For example 'translator-oet'.");

                items.Add()
                .Field(p => p.GoogleCloudAuthConfig.ParentProjectId)
                .Label("Project Id")
                .Hint("For example 'translator-oet'.");

                items.Add()
                .Field(p => p.GoogleCloudAuthConfig.PrivateKeyId)
                .Label("Private Key Id");

                items.Add()
                .Field(p => p.GoogleCloudAuthConfig.PrivateKey)
                .Label("Account Private Key");

                items.Add()
                .Field(p => p.GoogleCloudAuthConfig.ClientId)
                .Label("Client Id");

                items.Add()
                .Field(p => p.GoogleCloudAuthConfig.ClientEmail)
                .Label("Account Client Email");

                items.Add()
                .Field(p => p.GoogleCloudAuthConfig.AuthUri)
                .Label("Authentication End Point")
                .Hint("Default value is 'https://accounts.google.com/o/oauth2/auth'.");

                items.Add()
                .Field(p => p.GoogleCloudAuthConfig.TokenUri)
                .Label("Token End Point")
                .Hint("Default value is 'https://oauth2.googleapis.com/token'.");

                items.Add()
                .Field(p => p.GoogleCloudAuthConfig.AuthProviderX509CertUrl)
                .Label("Authentication Provider Certificate URL")
                .Hint("Default value is 'https://www.googleapis.com/oauth2/v1/certs'.");

                items.Add()
                .Field(p => p.GoogleCloudAuthConfig.ClientX509CertificateUrl)
                .Label("Client Certificate URL");
                })
                );

                s.Add().Title("Generate").Buttons(b => { b.Previous(); })
                .ContentId("stepGenerate");
                }))
            </div>
        </div>
    </div>
</div>
<script>

    var sqlErrorMsg = "";
    var stoErrorMsg = "";
    var redErrorMsg = "";
    var editorErrorMsg = "";
    var chkValid = true;

    function copyJson() {
        var copyText = $("#jsonData").val();
        navigator.clipboard.writeText(copyText);
        $("#configCopiedDialog").data("kendoDialog").open();
    }

    function onDone(e) {
        e.originalEvent.preventDefault();
    }

    function onSaveGrid(e) {
        // Prevent post back.
        e.preventDefault();
    }

    $(".tog-secret").click(function() {
        $(this).toggleClass("k-i-lock k-i-unlock");
        var input = $("[id='" + $(this).attr("toggle") + "']");
        if (input.attr("type") === "password") {
            input.attr("type", "text");
        } else {
            input.attr("type", "password");
        }
    });

    function loadSecret() {
        var input = $("#idSecretName");
        var value = input.val();
        if (isNotEmpty(value)) {
            var url = "@Url.Action("ConfigWizard")/" + value;
            windows.location = url;
        } else {
            alert("Please enter a secret name.");
        }

    };

    function btnCheckOnClick(e) {
        e.preventDefault();
        $("#resultsTbl").show();
        $("#resultTblBody").html("");
        $("#testStatus").html("");
        var data = $("#wizard").serialize();

        var loader = $('#loader1').kendoLoader({
            themeColor: 'primary'
        }).data("kendoLoader");
        loader.setOptions({ type: "converging-spinner" });
        loader.show();

        chkValid = true; // reset to true.

        callTest("@Url.Action("TestAll")", data, "Testing all connection(s)...");

        // Wrap up tests here.
        loader.hide();
    }

    function callTest(url, data, message) {
        $("#testStatus").html(message);
        $.ajax({
            async: true,
            type: "POST",
            url: url,
            data: data,
            success: function(response) {
                displayResults(response.Results);
                $("#testStatus").html("Done.");
            },
            dataType: "json"
        });
    }

    function displayResults(data) {
        var body = $("#resultTblBody");

        $.each(data,
            function(index, row) {
                if (row.Success === true) {
                    body.append("<tr><td><div class='btn btn-sm btn-success'><i class='fa fa-check-circle' aria-hidden='true'></i></div> OK</td><td>" + row.ServiceType + "</td><td>" + row.Host + "</td></tr>");
                } else {
                    chkValid = false;
                    body.append("<tr><td><div class='btn btn-sm btn-danger'><i class='fa fa-times-circle' aria-hidden='true'></i></div> Error</td><td>" + row.ServiceType + "</td><td>" + row.Host + "</td></tr>");
                }
                if (row.Message) {
                    body.append("<tr><td colspan='3'>" + row.Message + "</td></tr>");
                }
                $("#btnBuild").show();
                // Show build
                //if (chkValid) {
                //    $("#btnBuild").show();
                //} else {
                //    $("#btnBuild").hide();
                //}
            });
    }

    function isNotEmpty(value) {
        if ((typeof value === "undefined") || (value === null) || (value.trim() === "")) {
            return false;
        } else {
            return true;
        }
    }

    function saveGridData(gridName, fieldName) {
        var dbgrid = $(gridName).data("kendoGrid");
        var data = dbgrid.dataSource.data();
        $(fieldName).val(JSON.stringify(data));
        return data;
    }

    //
    // Client-side Validation
    //
    (function($, kendo) {
        $.extend(true,
            kendo.ui.validator,
            {
                rules: {
                    AllowedFileTypes: function(input) {
                        if (input.is("[name='AllowedFileTypes']")) {
                            if (!input.val()) {
                                return false;
                            }
                        }
                        return true;
                    },
                    AllowLocalRegistration: function(input) {
                        if (input.is("[name='AllowLocalRegistration']")) {
                            if (!input.is(':checked')) {
                                var gid = $("#AuthenticationConfig.Google.ClientId").val();
                                var mid = $("#AuthenticationConfig.Microsoft.ClientId").val();
                                var fid = $("#AuthenticationConfig.Facebook.AppId").val();

                                if (!gid && !mid && !fid) {
                                    return false;
                                }
                            }
                        }
                        return true;
                    },
                    BlobConnectionsJson: function(input) {
                        var isValid = true;
                        if (input.is("[name='AzureBlobConnectionsJson']") || input.is("[name='AwsS3ConnectionsJson']")) {

                            stoErrorMsg = "";
                            var results1 = saveGridData("#azureStorageGrid", "#AzureBlobConnectionsJson");
                            var results2 = saveGridData("#amazonS3Grid", "#AwsS3ConnectionsJson");

                            var count = 0;
                            if (typeof (results1) !== "undefined" && results1.length > 0) {
                                count++;
                            }

                            if (typeof (results2) !== "undefined" && results2.length > 0) {
                                count++;
                            }

                            if (count === 0) {
                                if (stoErrorMsg === "") {
                                    stoErrorMsg = "At least one storage connection required.";
                                } else {
                                    stoErrorMsg = "<br />At least one storage connection required.";
                                }
                            }

                            // If not valid here, don't continue checking.
                            if (!isValid) {
                                return false;
                            }

                            // Azure property tests
                            $.each(results1,
                                function(index, connection) {
                                    if ((!connection.AzureBlobStorageConnectionString) || (!connection.AzureBlobStorageContainerName) || (!connection.AzureBlobStorageEndPoint)) {

                                        isValid = false;
                                        if (stoErrorMsg === "") {
                                            stoErrorMsg = "Storage connection is incomplete.";
                                        } else {
                                            stoErrorMsg = sqlErrorMsg + "<br />Storage connection is incomplete.";
                                        }
                                    }
                                });

                            if (isValid) {
                                // Amazon property tests
                                $.each(results2,
                                    function(index, connection) {
                                        if ((!connection.AmazonAwsAccessKeyId) || (!connection.AmazonAwsSecretAccessKey) || (!connection.AmazonBucketName) || (!connection.AmazonRegion) || (!connection.ServiceUrl)) {

                                            isValid = false;
                                            storageConnIsComplete = false;
                                            if (stoErrorMsg === "") {
                                                stoErrorMsg = "Storage connection is incomplete.";
                                            } else {
                                                stoErrorMsg = sqlErrorMsg + "<br />Storage connection is incomplete.";
                                            }
                                        }
                                    });
                            }

                        }
                        return isValid;
                    },
                    BlobPublicUrl: function(input) {
                        return true;
                    },
                    EmailFrom: function(input) {
                        if (input.is("[name='SendGridConfig.EmailFrom']")) {
                            var val = input.val();
                            if (val === null) {
                                return false;
                            }
                            var result = val.match(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/);
                            if (result === null) {
                                return false;
                            }
                        }
                        return true;
                    },
                    PublisherUrl: function(input) {
                        if (input.is("[name='SiteSettings.PublisherUrl']")) {
                            var val = input.val();
                            if (val === null) {
                                return false;
                            }
                            if (!val.startsWith("https://") && !val.startsWith("http://")) {
                                editorErrorMsg = "Urls must begin with https:// or https://";
                                return false;
                            }
                        }
                        return true;
                    },
                    SecretName: function(input) {
                        if (input.is("[name='SecretName']")) {
                            var val = input.val();
                            if (val === null) {
                                return false;
                            }
                            var result = val.match("^[0-9, a-z, A-Z]{1,40}$");
                            if (result === null) {
                                return false;
                            }
                        }
                        return true;
                    },
                    SendGridKey: function(input) {
                        if (input.is("[name='SendGridConfig.SendGridKey']")) {
                            if (!input.val()) {
                                return false;
                            }
                        }
                        return true;
                    },
                    EditorUrlsJson: function(input) {
                        var isValid = true;
                        editorErrorMsg = "";
                        if (input.is("[name='EditorUrlsJson']")) {

                            var results = saveGridData("#edGrid", "#EditorUrlsJson");
                            if (typeof (results) === "undefined" || results.length < 1) {
                                editorErrorMsg = "At least one Editor Url is required.";
                                return false;
                            }
                            $.each(results,
                                function(index, editor) {
                                    if (!editor.Url.startsWith("https://")) {
                                        editorErrorMsg = "Urls must begin with https://";
                                        isValid = false;
                                    }
                                });
                        }
                        return isValid;
                    },
                    SqlConnectionsJson: function(input) {
                        var isValid = true;
                        sqlErrorMsg = "";

                        if (input.is("[name='SqlConnectionsJson']")) {
                            var results = saveGridData("#dbGrid", "#SqlConnectionsJson");
                            if (typeof (results) === "undefined" || results.length < 1) {
                                sqlErrorMsg = "At least one DB connection is required.";
                                return false;
                            }

                            $.each(results,
                                function(index, connection) {

                                    if ((!connection.CloudName) || (!connection.Hostname) || (!connection.InitialCatalog) || (!connection.UserId) || (!connection.Password)) {
                                        isValid = false;
                                        if (sqlErrorMsg === "") {
                                            sqlErrorMsg = "DB connection is incomplete.";
                                        } else {
                                            sqlErrorMsg = sqlErrorMsg + "<br />DB connection is incomplete.";
                                        }
                                    }

                                }
                            );
                        }
                        return isValid;
                    }
                },
                messages: {
                    AllowLocalRegistration: function(input) {
                        return "Login with C/CMS is required if no other provider configured.";
                    },
                    AllowedFileTypes: function(input) {
                        return "Allowed file types required.";
                    },
                    BlobConnectionsJson: function(input) {
                        return stoErrorMsg;
                    },
                    BlobPublicUrl: function(input) {
                        return "Valid Url address required.";
                    },
                    EmailFrom: function(input) {
                        return "Valid email address required.";
                    },
                    EditorUrlsJson: function(input) {
                        return editorErrorMsg;
                    },
                    PublisherUrl: function(input) {
                        return "Valid URL is required.";
                    },
                    SecretName: function (input) {
                        return "Name required with only letters and numbers (40 chars max)."
                    },
                    SendGridKey: function(input) {
                        return "SendGrid key required.";
                    },
                    SqlConnectionsJson: function(input) {
                        return sqlErrorMsg;
                    },
                    TestConfig: function(input) {
                        return "Configuration test has not completed successfully.";
                    }
                }
            });
    })(jQuery, kendo);

    $.ready(function () {

    });
</script>

<kendo-dialog name="configCopiedDialog" title="Configuration Copied!" modal="true" visible="false" min-width="500">
    <content>
        <div>
            <p>Your configuration is now copied to your clipboard.</p>
            <p>
                Next, go to the <a class="text-light" href="@Url.Action("BootConfig")">configuration installation</a> and paste
                the contents of your clipboard into a configuration variable.
            </p>
            <a class="btn btn-success" href="@Url.Action("BootConfig")">Config Install</a>
            <br /><br />
        </div>
    </content>
    <popup-animation>
        <open duration="500" effects="fade:in" />
        <close duration="500" effects="fade:out" />
    </popup-animation>
</kendo-dialog>

<script id="stepImport" type="text/kendo-template">
    @(Html.HiddenFor(m => m.GoogleBlobConnectionsJson))
    <div style="width:100%;height:200px;">
    <div>
        <h3>Import Settings</h3>
        <br />
        <p>Load existing settings here to edit your current configuration:</p>
    </div>
    <div class="input-group mb-3">
        <div class="btn btn-secondary"><span class="k-icon k-i-lock tog-secret" title="View or hide secret" toggle="ImportJson"></span></div>
        <input class="form-control" id="ImportJson" name="ImportJson" type="password" value="" />
        <button class="btn btn-success" type="submit" title="Click to load JSON into form below." id="button-addon2">Load</button>
    </div>
    </div>
</script>
<script id="editorUrls" type="text/kendo-template">
    @(Html.HiddenFor(m => m.EditorUrlsJson))
    @(Html.Kendo().Grid(Model.EditorUrls).Name("edGrid")
        .Columns(col =>
        {
            col.Bound(m => m.CloudName);
            col.Bound(m => m.Url).HtmlAttributes(new {style = "overflow: hidden;min-width:400px;"});
            col.Command(c => c.Destroy());
        })
        .Events(ev => ev.SaveChanges("onSaveGrid"))
        .Editable(GridEditMode.InCell)
        .ToolBar(t => { t.Create(); })
        .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(20)
            .ServerOperation(false)
        ))
</script>
<script id="sqlConnTemplate" type="text/kendo-template">
    @(Html.HiddenFor(m => m.SqlConnectionsJson))
    @(Html.Kendo().Grid(Model.SqlConnectionStrings).Name("dbGrid")
        .Columns(col =>
        {
            col.Bound(m => m.CloudName);
            col.Bound(m => m.IsPrimary);
            col.Bound(m => m.Hostname);
            col.Bound(m => m.InitialCatalog);
            col.Bound(m => m.UserId);
            col.Bound(m => m.Password);
            col.Command(c => c.Destroy());
        })
        .Events(ev => ev.SaveChanges("onSaveGrid"))
        .Editable(GridEditMode.InCell)
        .ToolBar(t => { t.Create(); })
        .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(20)
            .ServerOperation(false)
        ))
</script>
<script id="azureBlobConnTemplate" type="text/kendo-template">
    @(Html.HiddenFor(m => m.AzureBlobConnectionsJson))
    @(Html.Kendo().Grid(Model.StorageConfig.AzureConfigs).Name("azureStorageGrid")
        .Columns(col =>
        {
            col.Bound(m => m.AzureBlobStorageContainerName);
            col.Bound(m => m.AzureBlobStorageEndPoint).HtmlAttributes(new {style = "overflow: hidden;max-width:300px;"});
            col.Bound(m => m.AzureBlobStorageConnectionString).HtmlAttributes(new {style = "overflow: hidden;max-width:300px;"});
            col.Command(c => c.Destroy());
        })
        .Events(ev => ev.SaveChanges("onSaveGrid"))
        .Editable(GridEditMode.InCell)
        .ToolBar(t => t.Create())
        .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(20)
            .ServerOperation(false)
        ))
</script>
<script id="awsBlobConnTemplate" type="text/kendo-template">
    @(Html.HiddenFor(m => m.AwsS3ConnectionsJson))
    @(Html.Kendo().Grid(Model.StorageConfig.AmazonConfigs).Name("amazonS3Grid")
        .Columns(col =>
        {
            col.Bound(m => m.AmazonRegion);
            col.Bound(m => m.ProfileName).Hidden(true);
            col.Bound(m => m.AmazonBucketName);
            col.Bound(m => m.AmazonAwsAccessKeyId).HtmlAttributes(new {style = "overflow: hidden;max-width:200px;"});
            col.Bound(m => m.AmazonAwsSecretAccessKey).HtmlAttributes(new {style = "overflow: hidden;max-width:200px;"});
            col.Bound(m => m.ServiceUrl);
            col.Command(c => c.Destroy());
        })
        .Events(ev => ev.SaveChanges("onSaveGrid"))
        .Editable(GridEditMode.InCell)
        .ToolBar(t => t.Create())
        .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(20)
            .ServerOperation(false)
        ))
</script>
<script id="stepGenerate" type="text/kendo-template">
    <h3>Check Configuration</h3>
    <p>Click the &quot;Check&quot; button below to validate database, file storage, and CDN connection settings.</p>
    <p>If check is successful, the &quot;Build&quot; button will appear. Click on it to generate the configuration.</p>
    <button id="btnCheck" type="button" class="btn btn-primary" onclick="btnCheckOnClick(event)">Check</button>
    <div id="loader1"></div>
    <button id="btnBuild" type="submit" class="btn btn-success" style="display:none">Save Changes</button>
    <br /><br />
    <div id="testStatus"></div>
    <table id="resultsTbl" class="table table-dark" style="width: 100%;display:none;">
        <thead>
            <tr>
                <th scope="col">Status</th>
                <th scope="col">Service</th>
                <th scope="col">Description</th>
            </tr>
        </thead>
        <tbody id="resultTblBody"></tbody>
    </table>
</script>

@{
    await Html.RenderPartialAsync("_ValidationScriptsPartial");
}