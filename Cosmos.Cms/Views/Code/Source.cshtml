@using Cosmos.Cms.Common.Services.Configurations
@using Microsoft.Extensions.Options
@inject IOptions<CosmosConfig> options
@model List<Cosmos.BlobService.FileManagerEntry>
@{
    var publisherUrl = ViewData["PublisherUrl"];
    var directoryOnly = (bool)ViewData["DirectoryOnly"];
    var editorExtensions = new string[] { ".js", ".css", ".html", ".htm", ".json", ".xml" };

    if (directoryOnly)
    {
        ViewData["Title"] = "Source Code Folders";
    }
    else
    {
        ViewData["Title"] = "Source Code";
    }

    var isReviewer = User.IsInRole("Reviewers");
    var canEdit = User.IsInRole("Administrators") || User.IsInRole("Editors");
    var pathPrefix = (string)ViewData["PathPrefix"];
    var pathParts = new List<string>();

    //var containerCss = "container mt-5 pt-2";

    if (!string.IsNullOrEmpty(pathPrefix) && pathPrefix != "/")
    {
        pathParts.AddRange(pathPrefix.Trim('/').Split('/').Where(w => w != "/"));
    }

    var rowCount = (int)ViewData["RowCount"];
    var sortOrder = (string)ViewData["sortOrder"];
    var currentSort = (string)ViewData["currentSort"];
    var pageNumber = (int)ViewData["pageNo"];
    var pageSize = (int)ViewData["pageSize"];

    var pagerModel = new GridPagerPartialViewModel(pageNumber, rowCount, pageSize, sortOrder, currentSort, "/Editor/Index");
}
<link href="~/lib/filepond/filepond.css" rel="stylesheet" />
<partial name="_ValidationScriptsPartial" />
<div class="container mt-3">
    <div class="row bg-dark">
        <div class="col">
            <h3 class="text-light">@ViewData["Title"]</h3>
            @if (directoryOnly)
            {
                <h5>Select the folder where you want to place the file(s).</h5>
            }
        </div>
    </div>

    <div class="row bg-dark">
        <div class="col-md-12 text-truncate">
            <nav class="d-flex bg-dark">
                <h6 class="mb-3 mt-3 text-bg-dark">
                    <a class="text-reset" href="/Code/Source?target=/&directoryOnly=@directoryOnly"><i class="fa-solid fa-house"></i></a>
                   @{
                        var p = "";
                        int counter = 0;
                    }
                    @foreach (var item in pathParts)
                    {
                        counter++;
                        p += "/" + item;
                        var href = $"/Code/Source?target={p}&directoryOnly={directoryOnly}";
                        <span class="text-reset">/</span> <a class="text-reset" href="@href.TrimStart('/')">@item</a>
                    }
                </h6>
            </nav>
        </div>
    </div>

    @if (directoryOnly == false)
    {
        <div class="row bg-dark">
            <div class="col-md-12">
                <!-- Filepond File Uploader -->
                <input type="file"
                   class="filepond"
                   id="filepond"
                   name="files"
                   data-file-metadata-path="@pathPrefix"
                   multiple>
            </div>
        </div>
    }
    
    <div class="row bg-dark">
        <div class="col-md-4">
            <div class="btn-group" role="group" aria-label="File and folder actions">
                @if (directoryOnly)
                {
                    <button id="btnCancel" type="button" class="btn btn-sm btn-secondary" onclick="btnClick('cancel')">Cancel</button>
                    <button id="btnMoveItems" type="button" class="btn btn-sm btn-secondary" onclick="btnClick('moveItems')" title="Move selected items" disabled>Move</button>
                }
                else
                {
                    <button id="btnClear" type="button" class="btn btn-sm btn-secondary" title="Clear list of selected items" disabled>Clear</button>
                    <button id="btnRename" type="button" class="btn btn-sm btn-secondary" onclick="btnClick('rename')" disabled>Rename</button>
                    <button id="btnDelete" type="button" class="btn btn-sm btn-secondary" onclick="btnClick('delete')" disabled>Delete</button>
                    <button id="btnMove" type="button" class="btn btn-sm btn-secondary" onclick="btnClick('move')" disabled>Move</button>
                }
            </div>
        </div>
        <div class="col-md-4 d-flex justify-content-center">
            <partial name="~/Views/Shared/GridPager/_GridPager.cshtml" model="pagerModel"></partial>
        </div>
        <div class="col-md-4">
            <form id="frmNewFolder" class="d-flex" asp-action="NewFolder" method="post">
                <input type="hidden" name="ParentFolder" id="ParentFolder" value="@pathPrefix" />
                <input type="hidden" name="DirectoryOnly" id="DirectoryOnly" value="@directoryOnly" />
                <input class="form-control form-control-sm me-2" name="FolderName" id="FolderName" type="text" placeholder="New folder name" aria-label="New folder name" minlength="2" required />
                <button class="btn btn-sm btn-secondary" type="submit">Create</button>
            </form>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <!-- Flexbox container for aligning the toasts -->
            <div aria-live="polite" aria-atomic="true" class="d-flex justify-content-center align-items-center" style="position:relative;">
                <!-- Then put toasts within -->
                <div id="copied-toast" class="toast" role="alert" aria-live="assertive" aria-atomic="true" style="position: absolute; top: 0; left: 0;z-index:50000;">
                    <div class="toast-body">
                        Copied URL.
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12 bg-dark">
            <div class="table-responsive custom-table-responsive">
                <table class="table custom-table">
                    <thead>
                        <tr>
                            <th scope="col">
                                Select
                            </th>
                            <th>Type</th>
                            <th></th>
                            <th>Name</th>
                            <th>Modified</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var row in Model)
                        {
                            <tr scope="row">
                                <td scope="row" style="width:30px;">
                                    <input type='checkbox' class='gridCheckBox' data-ccms-isdir='@row.IsDirectory' data-ccms-blob='@row.Path.Trim('/')'>
                                </td>
                                <td style="width:30px;">
                                    @if (row.IsDirectory)
                                    {
                                        <a href='/Code/Source?target=@row.Path&directoryOnly=@directoryOnly'><i class='fa-solid fa-folder'></i></a>
                                    }
                                    else
                                    {
                                        <div><i class='fa-solid fa-file'></i></div>
                                    }
                                </td>
                                <td style="width:60px;">
                                    <div class='btn-group' role='group'>
                                        @if (row.IsDirectory == false)
                                        {
                                            <button class="btn btn-sm btn-secondary ccms-clip-board" title="Copy URL to clipbard" data-clipboard-text="@options.Value.SiteSettings.BlobPublicUrl.TrimEnd('/')/@row.Path"><i class="fa-regular fa-clipboard"></i></button>
                                            @if (editorExtensions.Contains(row.Extension))
                                            {
                                                <a class='btn btn-sm btn-secondary' title='Open code editor' href='/Code/EditCode?path=@row.Path'><i class='fa-solid fa-code'></i></a>
                                            }
                                        }
                                    </div>
                                </td>
                                <td>
                                    @if (row.IsDirectory)
                                    {
                                        <a href='/Code/Source?target=@row.Path&directoryOnly=@directoryOnly'>@row.Name</a>
                                    }
                                    else
                                    {
                                        <a href="javascript:download('@row.Path')">@(row.Name + row.Extension)</a>
                                    }
                                </td>
                                <td style="width:240px">
                                    <div class='toLocalTimeZone'>@row.ModifiedUtc</div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="row bg-dark pb-3">
        <div class="col-md-12 d-flex justify-content-center">
            <partial name="~/Views/Shared/GridPager/_GridPager.cshtml" model="pagerModel"></partial>
        </div>
    </div>
</div>

<form>
    @Html.AntiForgeryToken()
    <input id="frmPathList" name="frmPathList" type="hidden" />
</form>


<!-- Before the end of the body tag -->
<script src="~/lib/filepond-plugin-file-metadata/dist/filepond-plugin-file-metadata.min.js"></script>
<script src="~/lib/filepond/filepond.min.js"></script>

<div class="modal mt-5" id="checkFirstModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 id="checkFirstTitle" class="modal-title">Verification</h5>
            </div>
            <div class="modal-body">
                <div id="checkFirstDialog"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="continueAction()" data-bs-dismiss="modal">Yes</button>
                <button type="button" class="btn btn-secondary" onclick="cancelAction()" data-bs-dismiss="modal">No</button>
            </div>
        </div>
    </div>
</div>

<div class="modal mt-5" id="renameModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="frmChangeName" asp-action="Rename" asp-controller="Code" method="post">
                @Html.AntiForgeryToken()
                <input type="hidden" id="BlobRootPath" name="BlobRootPath" value="@pathPrefix" />
                <input type="hidden" id="FromBlobName" name="FromBlobName" value="@pathPrefix" />
                <div class="modal-header">
                    <h5 id="checkFirstTitle" class="modal-title">Rename Item</h5>
                </div>
                <div class="modal-body">
                    <label for="FromBobName" class="form-label">Original name:</label>
                    <div class="input-group mb-3">
                        <span id="itemPrefix1" class="input-group-text"></span>
                        <input class="form-control" id="ctrlFromBlobName" aria-describedby="emailHelp" disabled>
                    </div>
                    <label for="ToBlobName" class="form-label">Change to:</label>
                    <div class="input-group mb-3">
                        <span id="itemPrefix2" class="input-group-text"></span>
                        <input title="Enter the new name of the item" class="form-control" id="ToBlobName" name="ToBlobName" required>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button id="btnSubmitChange" type="submit" value="submit" class="btn btn-secondary">Change</button>
                    <div id="extAlert" class="alert alert-warning" role="alert" style="display:none"><i class="fa-solid fa-triangle-exclamation"></i> Warning: file extension does not match original.</div>
                </div>
            </form>
        </div>
    </div>
</div>

<script src="~/js/clipboard.min.js"></script>

<script>

    var btns = document.querySelectorAll(".ccms-clip-board");
    var clipboard = new ClipboardJS(btns);

    clipboard.on('success', function (e) {
        $("#copied-toast").toast("show");
    });

    clipboard.on('error', function (e) {
        console.info('Action:', e.action);
        console.info('Text:', e.text);
        console.info('Trigger:', e.trigger);
    });

    // Set mode
    const directoryOnly = "@directoryOnly" === "True";

    // Get a reference to the file input element
    const inputElement = document.querySelector('input[type="file"]');

    // Register meta data Plug In
    FilePond.registerPlugin(FilePondPluginFileMetadata);

    // Create a FilePond instance
    const pond = FilePond.create(inputElement, {
        chunkUploads: true,
        chunkSize: 5242880, // bytes (5 MB) - AWS S3 multi upload requires 5 MB parts. Last part can be any size
        chunkForce: true
    });


    FilePond.setOptions({
        server: "@Url.Action("Process")"
    });

    pond.on('addfile', (error, file) => {
        if (error) {
            console.log('Oh no');
            return;
        }

        var relativePath = file.relativePath;
        file.setMetadata("relativePath", relativePath);
        file.setMetadata("fileName", file.filename);

        console.log('File added', file);
    });

    // Event handlers
    document.addEventListener('FilePond:processfiles', (e) => {
        window.location.href = "@Url.Action("Source")?target=@pathPrefix";
    });

    let paths = [];

    function savePath(path) {
        // Avoid duplicates
        if (paths.indexOf(path) == -1) {
            paths.push(path);
        }
        localStorage.setItem("paths", JSON.stringify(paths));
    }

    function removePath(path) {
        var tmp = paths.filter(function (value) {
            return value !== path;
        });
        paths = tmp;
        localStorage.setItem("paths", JSON.stringify(paths));
    }

    // Reload selected paths from local storage
    function reloadPaths() {
        var data = localStorage.getItem("paths");

        if (typeof (data) === "undefined" || data === null || data === "") {
            paths = []
        } else {
            paths = JSON.parse(data);
        }
    }

    function clearPaths() {
        paths = [];
        localStorage.removeItem("paths");
    }

    function getItemsToMove() {
        var items = JSON.parse(localStorage.getItem("itemsToMove"));
        return items;
    }

    function getPath(checkbox) {

        var isDirectory = $(checkbox).attr('data-ccms-isdir');

        if (isDirectory === "True") {
            return $(checkbox).attr('data-ccms-blob') + "/";
        }
        else {
            return $(checkbox).attr('data-ccms-blob');
        }
    }

    $(document).ready(function () {
        $(".toLocalTimeZone").each(function (index, element) {
            var date = new Date($(element).html());

            if (isNaN(date)) {
                return;
            }

            $(element).html(date.toLocaleDateString() + " " + date.toLocaleTimeString());

        });

        // Reload selected paths from local storage
        reloadPaths();

        $(".gridCheckBox").each(function (index, element) {

            var path = getPath(element);

            if (path === "pub" || path === "pub/") {
                $(element).prop('checked', false);
                $(element).prop('disabled', true);
            }

            if ((paths.indexOf(path) > -1)) {
                $(element).prop('checked', true);
            }

            $(element).on("change", function () {
                if (directoryOnly) {
                    var isChecked = $(element).prop('checked');
                    $(".gridCheckBox").each(function (i, e) {
                        $(e).prop('checked', false);
                    });
                    $(element).prop('checked', true);
                }

                resetButtons();
            });

        });

        $("#btnClear").click(function () {
            clearSelection();
        });

        $("frmChangeName").submit(function (e) {
            clearPaths();
            return true;
        });

        resetButtons();
    });

    function clearSelection() {
        $(".gridCheckBox").each(function (index, element) {
            $(element).prop('checked', false);
        });
        clearPaths();
        resetButtons();
    }

    $("#frmChangeName").submit(function (e) {
        e.preventDefault();

        var form = $('#frmChangeName');

        $.post("@Url.Action("Rename", "Code")",
            form.serialize(),
            function (response) {
                clearSelection();
            })
            .done(function () {
                window.location.href = "/Code/Source?target=@p";
            })
            .fail(function () {
                alert("error");
            });

    });

    function resetButtons() {

        $(".gridCheckBox").each(function (index, element) {

            var path = getPath(element);

            if ($(element).is(':checked')) {
                savePath(path);
            } else {
                removePath(path);
            }

        });

        // Get the array length
        var arrayLength = paths.length;

        if (arrayLength > 0) {
            $("#btnClear").prop('disabled', false);
            $("#btnDelete").prop('disabled', false);
            $("#btnDelete").prop('title', "Click to delete.");
            $("#btnMove").prop('disabled', false);
            $("#btnMove").prop('title', "Click to move.");
            $("#btnRename").prop('title', "Select only one item.");
        } else {
            $("#btnClear").prop('disabled', true);
            $("#btnDelete").prop('disabled', true);
            $("#btnMove").prop('disabled', true);
            $("#btnRename").prop('title', "Select one item.");
        }

        if (arrayLength === 1) {
            $("#btnMoveItems").prop('disabled', false);
            $("#btnRename").prop('disabled', false);
            $("#btnRename").prop('title', "Click to rename.");
        } else {
            $("#btnRename").prop('disabled', true);
            $("#btnMoveItems").prop('disabled', true);
        }
    }

    var next = null;
    var checkFirstModal = null;

    function btnClick(command) {

        if (checkFirstModal === null) {
            checkFirstModal = new bootstrap.Modal(document.getElementById('checkFirstModal'));
        }

        // Get the array length
        var arrayLength = paths.length;

        switch (command) {
            case "cancel":
                clearPaths();
                window.location.href = '@Url.Action("Source")?target=@pathPrefix';
                break;
            case "delete":
                $("#checkFirstTitle").html("Delete Verification");
                if (arrayLength == 1) {
                    $("#checkFirstDialog").html("WARNING: Are you sure you want to permanently delete this item?");
                } else {
                    $("#checkFirstDialog").html("Are you sure you want to permanently delete " + arrayLength + " items?");
                }
                next = function () {
                    $.post('@Url.Action("DeleteItems")',   // url
                        {
                            ParentPath: '@pathPrefix',
                            Paths: paths
                        }, // data to be submit
                        function (data, status, jqXHR) {// success callback
                            clearSelection();
                            window.location.href = '@Url.Action("Source")?target=@pathPrefix';
                        })
                }
                break;
            case "rename":
                $("#checkFirstTitle").html("Rename Verification");
                $("#checkFirstDialog").html("Are you sure you want to rename this item?<br />/" + paths[0]);
                next = function () {

                    var len = paths[0].length;

                    if (paths[0].lastIndexOf("/") == len - 1) {
                        paths[0] = paths[0].substring(0, len - 1);
                    }

                    //itemPrefix
                    var pathArray = paths[0].split("/");
                    $("#itemPrefix1").html("");
                    $("#itemPrefix2").html("");

                    var p = "";
                    var len = pathArray.length;
                    for (var i = 0; i < len - 1; i++) {
                        if (pathArray[i] !== "") {
                            p = p + "/" + pathArray[i];
                        }
                    }

                    $("#itemPrefix1").html(p);
                    $("#itemPrefix2").html(p);

                    $("#FromBlobName").val(pathArray[pathArray.length - 1]);

                    $("#ctrlFromBlobName").val($("#FromBlobName").val());
                    var modal = new bootstrap.Modal(document.getElementById('renameModal'));
                    modal.show();
                }
                break;
            case "move":
                $("#checkFirstTitle").html("Move Items");
                if (arrayLength == 1) {
                    $("#checkFirstDialog").html("WARNING: Are you sure you want to move this item?");
                } else {
                    $("#checkFirstDialog").html("Are you sure you want to move " + arrayLength + " items?");
                }

                next = function () {
                    localStorage.setItem("itemsToMove", localStorage.getItem("paths"));
                    clearSelection();
                    window.location.href = '@Url.Action("Source")?target=@pathPrefix&directoryOnly=true'
                };
                break;
            case "moveItems":

                $("#checkFirstTitle").html("Move Items");

                var items = getItemsToMove();

                var dest = paths[0];

                var itemCount = items.length;

                $("#checkFirstDialog").html("Are you sure you want to move item(s) to: <br />" + paths[0]);

                next = function () {
                    $.post('@Url.Action("Move")',   // url
                        {
                            Destination: dest,
                            Items: items
                        }, // data to be submit
                        function (response) {// success callback

                        })
                        .done(function () {
                            clearSelection();
                            window.location.href = '@Url.Action("Source")?target=' + dest;
                        })
                        .fail(function () {
                            alert("error");
                        });
                }
                break;
        }

        checkFirstModal.show();
    }

    function cancelAction() {
        checkFirstModal.hide();
    }

    function continueAction() {
        next();
    }

    function download(p) {
        window.location.href = encodeURI("@Url.Action("Download")?path=" + p);
    }

</script>

