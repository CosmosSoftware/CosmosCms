@using Cosmos.Cms.Services
@using NonFactors.Mvc.Grid
@model IQueryable<NodeScriptItemViewModel>
@{
    // /Views/Code/Versions
    ViewData["Title"] = @ViewData["ArticleTitle"] + " Versions";
    var isReviewer = User.IsInRole("Reviewers");
    var isAuthor = User.IsInRole("Authors");
}

<div class="container mt-5 pt-2">
    <div class="row">
        <div class="col-md-12">
            <h3>@ViewData["ArticleTitle"]</h3>
            <h5>Version List</h5>
        </div>
    </div>
    <hr />
    <div class="row">
        <div class="col-md-12">
            <p>Shown below are all the different version(s) of this page.  Each shows if it a &quot;drafT&quot; or the data/time when it was &quot;published.&quot;</p>
            <p>&quot;Expires&quot; date/time is when a previously published version is replaced by a new published version.</p>
            <br />
            @if (!isReviewer)
            {
                <a id="btnNewVersion" class="btn btn-primary"
               title="Creates a new version of this article using the latest version, and puts it in edit mode."
               asp-action="CreateVersion" asp-route-id="@ViewData["ArticleId"]">
                    Create new version from latest version
                </a>
            }
            @(Html.Grid(Model)
                .Build(c =>
                {
                    c.Add(b => b.Version).RenderedAs(r => $"v.{r.Version}").Titled("");
                    c.Add().RenderedAs(r => $"<a class=\"btn btn-sm btn-secondary\" href=\"{Url.Action("EditCode", "Code")}/{r.Id}\" title=\"Edit code using Monaco code editor.\"><i class='fa-solid fa-code'></i></a>").Titled("Edit Tool").Encoded(false).Sortable(false).Filterable(false);
                    c.Add().RenderedAs(r => $"<a class=\"btn btn-sm btn-secondary\" href=\"{Url.Action("Duplicate", "Code")}/#: Id #\" title=\"Create a new web page based on this version.\"><span class=\"fa fa-external-link\"></span></a> <a class=\"btn btn-sm btn-secondary\" href=\"{Url.Action("ExportPage", "Code")}/#: Id #\" title=\"Export page.\" #: visibleStyle('{isReviewer}', '{isAuthor}', Published, true) #><span class=\"fa-solid fa-cloud-arrow-down\"></span></a>").Titled("New Page/Download").Encoded(false).Sortable(false).Filterable(false);
                    
                    c.Add(b => b.Updated).Titled("Updated").Filterable(GridFilterType.Double);
                    c.Add(b => b.Published).Titled("Published").Filterable(GridFilterType.Double);

                    c.Add().RenderedAs(r => $"<a class=\"btn btn-sm btn-success\" title=\"Promote this version to the latest version and put it in edit mode.\" href=\"{Url.Action("CreateVersion")}?id={Model}&entityId=#: Id #\"><span class=\"text-white fa fa-arrow-circle-up\" aria-hidden=\"true\"></span></a>").Titled("Promote").Width(50).Encoded(false).Sortable(false).Filterable(false);
                })
                .Sortable()
                .Filterable()
                .Pageable()
                )
        </div>
    </div>
</div>

<script>
    function visibleStyle(isReviewer, isAuthor, isPublished, usesEditor) {
        if (isReviewer === "True" || usesEditor === false || (isAuthor === "True" && isPublished !== null)) {
            return "style=display:none";
        }
        return "";
    }

    var editCodeUrl = "@Url.Action("Edit", "Code")";
    var editorChoice; // HTML or CODE
    var entityId; // Article id (entity id) being edited

    //
    // Opens the show edit dialog, if the user is about to edit a live page.
    // This dialog suggests creating new versions of pages to edit, rather
    // than editing the already published pages.
    //
    function showEditDialog(editor, id, isPublished) {

        editorChoice = editor;
        entityId = id;

        //
        // If article version is not published, then open editor strait away.
        //
        if (isPublished.trim() === "null") {
            openEditor(false);
        } else {
            //
            // Otherwise, open dialog suggesting user not edit already published
            // page, but, create a new version instead, and edit that.
            //
            var dialog = $("#editPublishedPageDialog").data("kendoDialog");
            dialog.open();
        }
    }

    function editNewVersion() {
        openEditor(true);
    }

    function editPublishedVersion() {
        openEditor(false);
    }

    function formatPublishedDate(published) {
        if (published === null) {
            return "Draft";
        } else {
            return kendo.toString(published, 'G');
        }
    }

    function formatExpiredDate(published) {
        if (published === null) {
            return "";
        } else {
            return kendo.toString(published, 'G');
        }
    }

    //
    // Opens either the HTML or code editor.
    //
    function openEditor(newVersion) {
        if (newVersion === true) {
            window.location.href = "@Url.Action("CreateVersion", "Code")/@Model";
        } else {
            window.location.href = editCodeUrl + "/@Model";
        }
    }

</script>
