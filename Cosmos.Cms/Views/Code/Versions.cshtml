@using Cosmos.Cms.Services
@model List<NodeScriptItemViewModel>
@{
    // /Views/Code/Versions
    ViewData["Title"] = @ViewData["ArticleTitle"] + " Versions";
    var isReviewer = User.IsInRole("Reviewers");
    var isAuthor = User.IsInRole("Authors");

    var rowCount = (int)ViewData["RowCount"];
    var sortOrder = (string)ViewData["sortOrder"];
    var currentSort = (string)ViewData["currentSort"];
    var pageNumber = (int)ViewData["pageNo"];
    var pageSize = (int)ViewData["pageSize"];

    var pagerModel = new GridPagerPartialViewModel(pageNumber, rowCount, pageSize, sortOrder, currentSort, "/Code/Versions");

}

<div class="container mt-3">
    <div class="row">
        <div class="col-md-12 text-light">
            <h3>Versions for end point: &quot;@ViewData["EndPoint"]&quot;</h3>
        </div>
    </div>
    <div class="row bg-dark">
        <div class="col-md-6">
            <div class="btn-group" role="group" aria-label="Page Actions">
                @if (!isReviewer)
                {
                    <a id="btnNewVersion" class="btn btn-sm btn-primary"
                   title="Creates a new version of this article using the latest version, and puts it in edit mode."
                   asp-action="CreateVersion" asp-route-id="@ViewData["ArticleId"]">
                        New Version
                    </a>
                    <a title="Return to page list" class="btn btn-sm btn-secondary" href="@Url.Action("Index")">Endpoints <i class="fa-solid fa-circle-arrow-right"></i></a>
                }
            </div>
        </div>
        <div class="col-md-6 d-flex justify-content-end">
            <partial name="~/Views/Shared/GridPager/_GridPager.cshtml" model="pagerModel"></partial>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="table-responsive custom-table-responsive">
                <table class="table custom-table">
                    <thead>
                        <tr scope="col">
                            Version
                        </tr>
                        <tr scope="col">
                            Edit Tool
                        </tr>
                        <tr scope="col">
                            Updated
                        </tr>
                        <tr scope="col">
                            Published
                        </tr>
                        <tr scope="col">
                            Promote
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var row in Model)
                        {
                            <tr scope="row">
                                <td scope="row">
                                    v.@row.Version
                                </td>
                                <td>
                                    <a class="btn btn-sm btn-secondary" href="@Url.Action("Edit", "Code", new { Id = row.Id })" title="Edit with Monaco/VS Code editor"><img src="/images/monaco-vscode-logo.png" height="22" /></a>
                                </td>
                                <td scope="row">
                                    <div class='toLocalTimeZone'>@row.Updated</div>
                                </td>
                                <td scope="row">
                                    <div class='toLocalTimeZone'>@row.Published</div>
                                </td>
                                <td style="width:50px;">
                                    <a class="btn btn-sm btn-secondary" title="Promote this version to the latest version and put it in edit mode." href="@Url.Action("CreateVersion")?id={Model}&entityId=@row.Id"><span class="text-white fa fa-arrow-circle-up" aria-hidden="true"></span></a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="row bg-dark">
        <div class="col-md-12 d-flex justify-content-center">
            <partial name="~/Views/Shared/GridPager/_GridPager.cshtml" model="pagerModel"></partial>
        </div>
    </div>
</div>

<script>
    //function visibleStyle(isReviewer, isAuthor, isPublished, usesEditor) {
    //    if (isReviewer === "True" || usesEditor === false || (isAuthor === "True" && isPublished !== null)) {
    //        return "style=display:none";
    //    }
    //    return "";
    //}

    var editCodeUrl = "@Url.Action("Edit", "Code")";
    var editorChoice; // HTML or CODE
    var entityId; // Article id (entity id) being edited

    //
    // Opens the show edit dialog, if the user is about to edit a live page.
    // This dialog suggests creating new versions of pages to edit, rather
    // than editing the already published pages.
    //
    function showEditDialog(editor, id, isPublished) {

        editorChoice = editor;
        entityId = id;

        //
        // If article version is not published, then open editor strait away.
        //
        if (isPublished.trim() === "null") {
            openEditor(false);
        } else {
            //
            // Otherwise, open dialog suggesting user not edit already published
            // page, but, create a new version instead, and edit that.
            //
            var dialog = $("#editPublishedPageDialog").data("kendoDialog");
            dialog.open();
        }
    }

    function editNewVersion() {
        openEditor(true);
    }

    function editPublishedVersion() {
        openEditor(false);
    }

    function formatPublishedDate(published) {
        if (published === null) {
            return "Draft";
        } else {
            return kendo.toString(published, 'G');
        }
    }

    function formatExpiredDate(published) {
        if (published === null) {
            return "";
        } else {
            return kendo.toString(published, 'G');
        }
    }

    //
    // Opens either the HTML or code editor.
    //
    function openEditor(newVersion) {
        if (newVersion === true) {
            window.location.href = "@Url.Action("CreateVersion", "Code")/@Model";
        } else {
            window.location.href = editCodeUrl + "/@Model";
        }
    }

</script>
