@model EditScriptPostModel
@using Newtonsoft.Json;
@{
    // /Views/Code/Edit
    Layout = "_LayoutEditor";
    ViewData["Title"] = Model.EditorTitle;
    var fields = Model.EditorFields.ToArray();

    var aclass = "active";
}

<style>
    .m-editor-container {
        position: absolute;
        top: 87px;
        bottom: 1px;
        left: 1px;
        right: 1px;
    }

    #editspace {
        position: absolute;
        top: 27px;
        bottom: 1px;
        left: 1px;
        right: 1px;
    }

    .code-tabs.navbar {
        margin-top: 0px;
        margin-bottom: 0px;
        padding-top: 2px;
        height: 3px;
    }

    .code-tabs.nav-link {
        height: 26px;
        font-size: 0.8em;
        padding-left: 0.5rem;
        padding-right: 0.5rem;
        padding-top: 2px;
    }

    .code-tabs.nav-link {
        background-color: var(--bs-gray-600);
        color: white;
        border-color: transparent;
    }

        .code-tabs.nav-link.active {
            background-color: var(--bs-gray-900);
            color: white;
            border-color: black;
        }
</style>

<nav class="code-tabs navbar">
    <ul class="nav nav-tabs " id="nav-tab">
        @{
            foreach (var field in fields)
            {
                <li class="nav-item">
                    <a class="code-tabs nav-link @aclass"
                   title="@field.ToolTip"
                   data-bs-toggle="tooltip"
                   data-bs-placement="bottom"
                   data-ccms-fieldname="@field.FieldName"
                   data-bs-target="#editor-tab-pane"
                   role="tab"
                   aria-current="page">@field.FieldName</a>
                </li>
                aclass = "";
            }
        }
        <li class="nav-item">
            <a class="code-tabs nav-link"
               id="frmTab"
               title="Create or edit input variables"
               data-bs-toggle="tooltip"
               data-bs-placement="bottom"
               data-bs-target="#config-tab-pane"
               data-ccms-fieldname="InputVars"
               role="tab"
               aria-current="page">Configuration</a>
        </li>
    </ul>
    
    <a class="btn btn-sm btn-secondary me-3" target="_blank" asp-action="Debug" asp-route-id="@Model.Id">Debug</a>
</nav>

<div class="m-editor-container bg-dark">
    <p class="text-light ms-4 font-italic text-muted"><span class="badge badge-info">Tip: If below is empty, Cosmos will run: ./@Model.EndPoint/index.js</span></p>
    <div id="editspace"></div>
</div>

<div id="divConfigForm" style="display:none" class="m-editor-container bg-dark text-light">
    <div class="container mt-3">
        <div class="row justify-content-center">
            <div class="col-4-md">
                <h3>Endpoint Settings</h3>
                <form id="frmSave" action="/Code/Edit" method="post">
                    @Html.ValidationSummary()
                    <div class="mb-3">
                        <label for="InputVars" class="form-label">Input variables:</label>
                        <input asp-for="InputVars" type="text" class="form-control" aria-describedby="Title">
                        <div id="titleHelp" class="form-text">Comma delimited list, letters and numbers only, no spaces.</div>
                        <span asp-validation-for="InputVars" class="alert-warning"></span>
                        <p>List the variable names with the maximum number of characters allowed like this:</p>
                        <p>fromEmailAddr:128,subject:128,message</p>
                        <p>Separate the argument names and max-length values by a comma. If a max length is not provided, the default length is 1024.</p>
                    </div>
                    <div class="mb-3">
                        <label for="Description" class="form-label">Description:</label>
                        <textarea asp-for="Description" type="text" class="form-control" aria-describedby="Title"></textarea>
                        <div id="descriptionHelp" class="form-text">Describe what this script does.</div>
                        <span asp-validation-for="Description" class="alert-warning"></span>
                    </div>
                    <input type="hidden" asp-for="Id" />
                    <input type="hidden" asp-for="EndPoint" />
                    <input type="hidden" asp-for="Title" />
                    <input type="hidden" asp-for="EditingField" />
                    <input type="hidden" asp-for="Code" />
                    <input type="hidden" asp-for="Config" />
                    <input type="hidden" asp-for="Title" />
                    <input type="hidden" asp-for="Version" />
                    <input type="hidden" asp-for="EditorTitle" />
                    <input type="hidden" asp-for="IsValid" />
                    <input type="hidden" asp-for="Published" />
                    <input type="hidden" asp-for="RoleList" />
                    <input type="hidden" asp-for="EditorType" />
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    var next;

    var editor;
    var fieldId;
    var ccmsEditorIsLocked = false;

    $("#frmSave").submit(function (e) {
        e.preventDefault();
        saveChanges(null, null);
    });

    // Example: var editFields = '[{"FieldId":"HeaderJavaScript","FieldName":"Header JavaScript","EditorMode":0},{"FieldId":"Content","FieldName":"Html Content","EditorMode":1},{"FieldId":"FooterJavaScript","FieldName":"Footer JavaScript","EditorMode":0}]';
    var editFields = @(Html.Raw(JsonConvert.SerializeObject(Model.EditorFields)));

    function saveExistingLoadNewEditor(id) {
        if (editor !== null && typeof editor !== "undefined") {
            $("#" + fieldId).val(editor.getValue());
        }
        createAndLoadEditor(id);
    }

    //
    // Creates and loads a Monaco Editor.
    //
    function createAndLoadEditor(id) {
        if (editor !== null && typeof editor !== "undefined") {
            if (editor.getModel()) {
                editor.getModel().dispose();
            }
            $("#msgBox").html("Loading...");
            editor.dispose();
            editor = null;
        }

        $("#EditingField").val(null);

        if (id !== "Script") {

            $("#editspace").hide();
            $("#divConfigForm").show();

            return;
        }
        $("#divConfigForm").hide();
        $("#editspace").show();

        fieldId = null;
        var fieldInfo = editFields.find(o => o.FieldName === id);
        fieldId = fieldInfo.FieldId;


        // Monaco AMD Editor  - https://microsoft.github.io/monaco-editor/
        require.config({ paths: { 'vs': '/lib/monaco-editor/min/vs' } });

        //require.config({ paths: { vs: '/lib/node_modules/monaco-editor/dist' } }); // Emmet Abbr.
        require(['vs/editor/editor.main'],
            function () {

                var mode = null;

                switch (fieldInfo.EditorMode) {
                    case 0:
                        mode = "javascript"
                        break;
                    case 1:
                        mode = "html"
                        break;
                    case 2:
                        mode = "css";
                        break;
                    default:
                        mode = "html"
                        break;
                }

                $("#EditingField").val(fieldId);
                var hiddenInput = $("#" + fieldId);
                var code = hiddenInput.val();
                emmetMonaco.emmetHTML(monaco);
                editor = monaco.editor.create(document.getElementById('editspace'),
                    {
                        language: mode,
                        theme: "vs-dark",
                        value: code
                    });

                $("#msgBox").html("");

                // Close loading spiner and display saved status
                $("#spinLoading").hide();
                $("#btnSavingStatus").show();
            });
    }

    // Save the changes for this editor
    function saveChanges(myModal, next) {

        saving();

        if (typeof (myModel) !== "undefined" && myModel !== null) {
            myModal.hide();
        }
        // Saving publish date with time zone information
        savePublishDateTime();

        // Save title
        $("#Title").val($("#tbTitle").val());

        if (editor) {
            $("#" + fieldId).val(editor.getValue());
        }
        
        var form = $('#frmSave');

        $.post("@Url.Action("Edit")",
            form.serialize(),
            function (response) {

                //doneSaving();

                if (response.IsValid) {
                    if (typeof (next) !== "undefined" && next !== null) {
                        next();
                    }
                    //toastMsg("Successfully saved.");
                } else {
                    var errorMsg = "<h5>Error(s) detected while saving:</h5>";

                    // Invalid response.
                    $.each(response.Errors,
                        function (index, error) {
                            errorMsg = "<p>" + error.Key + "</p><ul>";
                            $.each(error.Errors,
                                function (index, innerError) {
                                    errorMsg = errorMsg + "<li>" + innerError.ErrorMessage + "</li>";
                                });
                            errorMsg = errorMsg + "</ul>";
                        });
                    $("#divErrorLog").html(errorMsg);
                    var errorModal = new bootstrap.Modal(document.getElementById('modalSavingError'));
                    errorModal.show();
                }
                doneSaving();
            }
        );

    }

    function btnSelectField(e) {
        fieldName = e.target.text();
        saveExistingLoadNewEditor(e.id);
    }

    function bgEditClickCustom(command) {
        switch (command) {
            case "Close":
                next = function () {
                    window.location.href = "@Url.Action("Index", "Code")";
                }
                $("#divSaveFirstDialog").html("Save page before closing editor?");
                checkFirstModal.show();
                break;
            case "Debug":
                alert("Debug!");
                break;
            case "Inputs":
                alert("Inputs!");
                break;
        }
    }

    function getLocalTimeZone() {
        var datetime = new Date();
        var dateTimeString = datetime.toString();
        var timezone = dateTimeString.substring(dateTimeString.indexOf("(") - 1);
        return timezone;
    }

    $(document).ready(function () {
        var fieldId = "@Model.EditingField";
        if (fieldId !== "") {
            var fieldInfo = editFields.find(o => o.FieldId === fieldId);
            createAndLoadEditor(fieldInfo.FieldName);
            // Refresh locks for everyone including self.
            setTimeout(function () {
                //ccmsSendSignal("NotifyRoomOfLock");
            }, 2000);
        }

        $("[data-ccms-fieldname]").click(function (event) {
            var name = $(event.target).attr("data-ccms-fieldname");
            $("[data-ccms-fieldname]").removeClass("active");
            saveExistingLoadNewEditor(name);
            $(event.target).addClass("active");
        });

    });

    $(window).bind('keydown', function (event) {
        if (event.ctrlKey || event.metaKey) {
            switch (String.fromCharCode(event.which).toLowerCase()) {
                case 's':
                    event.preventDefault();
                    $("#frmSave").submit();
                    break;
            }
        }
    });

</script>

<script src="https://cdn.jsdelivr.net/npm/monaco-editor@0.34.1/min/vs/loader.js" integrity="sha256-Nz+9xAJobnwZzjWKswoVGvxZhOdjpb9ILmKxOalIdsE=" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/emmet-monaco-es@5.1.2/dist/emmet-monaco.min.js" integrity="sha256-Gb6qD/EEAJEQ9x+nK9stef5r42hUQ9zazvr0vJAGiFE=" crossorigin="anonymous"></script>

<style>
    #lblTitle, #tbTitle, #timeZone, #lblPublished, #tbPublished, #btnPreview, #btnFiles, #liBtnVersions, #btnSaveAndPublish {
        display:none !important;
    }

    #btnSourceCode {
        display: block !important;
    }
</style>
