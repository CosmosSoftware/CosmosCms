@model EditScriptPostModel
@{
    // /Views/Code/Edit
    Layout = "_LayoutCodeEditor";
    ViewData["Title"] = Model.EditorTitle;
}
<!--
   Code highlighting
   https://highlightjs.org/
   -->
<link rel="stylesheet" href="https://highlightjs.org/static/demo/styles/base16/atelier-dune.css">
<script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.6.0/highlight.min.js"></script>


<form id="codeForm" asp-action="EditCode">
    <input type="hidden" asp-for="Id" />
    <input type="hidden" asp-for="EditingField" />
    <input type="hidden" asp-for="Code" />
    <input type="hidden" asp-for="Config" />
    <input type="hidden" asp-for="InputVars" />
    <input type="hidden" asp-for="Title" />
    <input type="hidden" asp-for="Version" />
    <input type="hidden" asp-for="EditorTitle" />
    <input type="hidden" asp-for="EndPoint" />
    <input type="hidden" asp-for="IsValid" />
    <input type="hidden" asp-for="Published" />
    <input type="hidden" asp-for="RoleList" />
    <input type="hidden" asp-for="EditorType" />
</form>

<script>
    var editorSaveSignal = "ArticleSaved";
    var editorType = "ScriptEditor";

    function btnCustomClick(e) {
        switch (e.target.text()) {
            case "Debug":
                openRunScript();
                break;
            case "Inputs":
                openInputVars();
                break;
            case "Versions":
                $("#versionsDialog").data("kendoDialog").open();
                break;
            case "Help":
                //window.open("https://cosmos.azureedge.net/edit_page#CodeEditor");
                break;
            case "Export":
                window.location.href = "@Url.Action("ExportPage", "Editor")/@Model.Id";
                break;
            case "Import":
                if (ccmsEditorIsLocked === true) {
                    alert("Import page while it is locked by another.");
                } else {
                    ccmsSendSignal("SetItemLock");
                    window.open("@Url.Action("ImportPage", "FileManager", new {Model.Id})", '_blank', 'height=510,width=1200,menubar=no,location=no,status=no,titlebar=no,toolbar=no');
                }
                break;
        }
    }

    // Used by signalR to re-load an article
    function ccmsLoadModel(model) {

        // get all the inputs into an array.
        var inputs = [@(Html.Raw(string.Join(",", Model.EditorFields.Select(s => "\"" + s.FieldId + "\"").ToArray()))) ];

        // not sure if you wanted this, but I thought I'd add it.
        // get an associative array of just the values.
        inputs.forEach(function (item) {
            var c = model[item];
            $("#" + item).val(c);
        });

        var activeTab = $(".tabitem.nav-link.active");
        var name = $(activeTab).attr("data-ccms-fieldname");
        createAndLoadEditor(name);// tabOnSelect on _LayoutCodeEditor
    }

    function closeEditor() {
        window.location.href = "@Url.Action("Versions", "Code", new { Id = Model.EndPoint})";
    }

    function goVersions() {
        window.location.href = "@Url.Action("Versions", "Code", new { Id = Model.EndPoint})";
    }

    // PUBLISHING METHODS
    function onPubNow(e) {
        var now = new Date();
        now = now.toUTCString();
        $("#Published").val(now);
        loadPublishLocalDateTime();
    }
    // SCHEDULING PUBLISHING UTILITIES
    function loadPublishLocalDateTime() {
        var published = $("#Published").val();
        var publishButton = $("#btnPublish");
        if (published !== null && typeof (published) !== "undefined" && published.trim() !== "") {

            if (!published.endsWith("Z") && !published.endsWith("GMT")) {
                published += " GMT";
            }

            var localDateTime = new Date(published);
            var dateTimePicker = $("#dtPublished").data("kendoDateTimePicker");
            dateTimePicker.value(localDateTime);
            var now = new Date();

            if (now < localDateTime) {
                //publishButton.attr("class", "k-button k-primary");
                publishButton.html("Pending");
                $(publishButton).kendoTooltip({
                    content: "This version is set to be published in the future at: " + localDateTime.toLocaleString() + ". Click to change."
                });
            } else {
                //publishButton.attr("class", "k-button k-success");
                publishButton.html("Published");
                $(publishButton).kendoTooltip({
                    content: "This version is now published and available on the web as of: " + localDateTime.toLocaleString() + ". Click to change."
                });
            }
        } else {
            //publishButton.attr("class", "k-button k-alert");
            publishButton.html("DRAFT");
            $(publishButton).kendoTooltip({
                content: "This version is not yet published. Click to schedule publishing date and time."
            });
        }
    }

    function openSchedulerDialog() {
        $("#schedulingDialog").data("kendoDialog").open();
    }

    $("#frmInputVariables").submit(function (event) {
        alert("Handler for .submit() called.");
        event.preventDefault();
    });

    function openRunScript() {

        var frmDebugScript = $("#frmDebugScript");
        frmDebugScript.empty();
        var fields = $("#InputVars").val().split(",");
        

        fields.forEach(function (item) {
            //frmDebugScript.append("<div class='mb-3'><div id='ccms-" + item + "'</div>");
            
            var itemid = "ccms-" + item;

            var fieldName = "#ccms-" + item;

            var frm = "<div class='mb-3'>";
            frm += "<label for='" + itemid + "' class='k-label k-input-label'>Input: " + item + "</label>";

            frm += "<span class='k-input k-textbox k-input-solid k-input-md k-rounded-md' style='width: 100%;'>";
            frm += "<input class='k-input-inner' id='" + itemid + "' >";
            frm += "</span>";

            frm += "</div>";

            frmDebugScript.append(frm);

        });
        

        $("#runScriptDialog").data("kendoDialog").open();
    }

    function openInputVars() {
        var textbox = $("#ccms-Inputs").data("kendoTextBox");
        textbox.value($("#InputVars").val());
        $("#inputVarsDialog").data("kendoDialog").open();
    }

    function setParameters() {
        var textbox = $("#ccms-Inputs").data("kendoTextBox");
        $("#InputVars").val(textbox.value());
    }

    function cancelPublish() {
        var dateTimePicker = $("#dtPublished").data("kendoDateTimePicker");
        dateTimePicker.value("");
    }

    function savePublishDateTime() {
        // Save date/time
        var dateTimePicker = $("#dtPublished").data("kendoDateTimePicker");
        var dateTimeValue = dateTimePicker.value();

        if ($("#Published").val() !== dateTimeValue) {
            $("#pendingChangesBadge").show();
        }

        // Note, this saves the date/time using local time (of the user's computer).
        // The server stores this as UTC time.
        if (dateTimeValue !== null && dateTimeValue !== "null" && dateTimeValue !== "") {
            var datetime = new Date(dateTimeValue);
            var utcString = datetime.toUTCString();
            $("#Published").val(utcString);
            $("#btnPublish").html("Published");
        } else {
            $("#btnPublish").html("DRAFT");
            $("#Published").val("");
        }

        //loadPublishLocalDateTime();
    }

    function cancelPublishDateTime() {
        loadPublishLocalDateTime();
        $("#schedulingDialog").data("kendoDialog").close();
    };

    function cancelDebug() {
        loadPublishLocalDateTime();
        $("#runScriptDialog").data("kendoDialog").close();
    }

    var terminal = null;

    async function executeDebug() {
        
        if (terminal === null) {
            terminal = await window.open("@Url.Action("Debug")", "Debugger");
        }

        // Save the script first
        await $("#codeForm").submit();

        var id = $("#Id").val();

        var fields = $("#InputVars").val().split(",");

        var parameters = "{";

        var separator = "";


        fields.forEach(function (item) {
            //frmDebugScript.append("<div class='mb-3'><div id='ccms-" + item + "'</div>");
            
            var itemid = "#ccms-" + item;

            parameters += separator + "\"" + item + "\"" + " : \"" + $(itemid).val() + "\"";

            separator = ", ";
        });

        parameters += "}";
        
        var json = JSON.parse(parameters);

        $.post("@Url.Action("Debug")/" + id, json,
            function (data) {   // success callback function
                
                var output = terminal.document.getElementById("runOutput");
                var input = terminal.document.getElementById("runInput");

                input.innerHTML = JSON.stringify(JSON.parse(parameters), undefined, 4);

                if (data.ApiResult.IsSuccess === true) {
                    output.innerHTML = JSON.stringify(data.ApiResult.JsonData, undefined, 4);
                } else {
                    output.innerHTML = JSON.stringify(data, undefined, 4);
                }
                
                terminal.opener.hljs.highlightAll();
            },
            'json'
        );
    }
</script>

