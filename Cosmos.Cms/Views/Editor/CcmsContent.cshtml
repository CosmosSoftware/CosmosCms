@model Cosmos.Cms.Common.Models.ArticleViewModel
@{
    Layout = null;
    ViewData["Title"] = Model.Title;
}
<!DOCTYPE HTML>
<html lang="@Model.LanguageCode">
<head>
    <title>@Model.Title</title>
    <!--
        CK Editor styles
    -->

    <style>
        figure.media {
            width: 640px;
        }
    </style>
    @Html.Raw(Model.Layout.Head)
    @*
    Page specific header
    *@
    @Html.Raw(Model.HeadJavaScript)
    @*
    Application Insights Scripts
    *@
    @Html.Raw(JavaScriptSnippet.FullScript)
</head>
<body>
    @Html.Raw(Model.Layout.HtmlHeader)
    <div ccms-content-id="@Model.Id">
        @Html.Raw(Model.Content)
    </div>
    @Html.Raw(Model.Layout.FooterHtmlContent)
    @*
    Page specific
    *@
    @Html.Raw(Model.FooterJavaScript)

    <script src="/lib/ckeditor/build_20230104.01/ckeditor.js"></script>
    <script>

        // Create editors
        var ccms_editors = [];
        var ccms_editorIds = [];
        var ccms_editibleAreas = [];
        var unmoutCkBox;
        const HTTP_SERVER_LAG = 1500;

        document.addEventListener("DOMContentLoaded", function (event) {
            ccms_createEditors();
        });

        function ccms_createEditors() {

            const inlineInjectElements = document.querySelectorAll('[data-ccms-ceid]');

            Array.from(inlineInjectElements).forEach(inlineElement => {

                const config = {
                    toolbar: {},
                    licenseKey: '',
                    autosave: {
                        save(editor) {
                            return ccms_saveEditorChanges(editor);
                        }
                    },
                    simpleUpload: {
                        // The URL that the images are uploaded to.
                        uploadUrl: '/FileManager/SimpleUpload/@Model.ArticleNumber',
                        // Enable the XMLHttpRequest.withCredentials property.
                        withCredentials: true
                    },
                    heading: {
                        options: [
                            { model: 'paragraph', title: 'Paragraph' },
                            { model: 'heading1', view: 'h1', title: 'Page Title' },
                            { model: 'heading2', view: 'h2', title: 'Heading 1' },
                            { model: 'heading3', view: 'h3', title: 'Heading 2' },
                            { model: 'heading4', view: 'h4', title: 'Heading 3' },
                            { model: 'heading5', view: 'h5', title: 'Heading 4' },
                            { model: 'heading6', view: 'h6', title: 'Heading 5' }
                        ]
                    },
                    link: {
                        decorators: {
                            toggleDownloadable: {
                                mode: 'manual',
                                label: 'Downloadable',
                                attributes: {
                                    download: 'file'
                                }
                            },
                            openInNewTab: {
                                mode: 'manual',
                                label: 'Open in a new tab',
                                defaultValue: '_self',
                                attributes: {
                                    target: '_self'
                                }
                            },
                            btnClass: {
                                model: 'manual',
                                label: 'CSS class',
                                attributes: {
                                    class: ''
                                }
                            }
                        }
                    }
                };

                BalloonEditor
                    .create(inlineElement, config)
                    .then(editor => {
                        window.editor = editor;
                        ccms_editors.push(editor);
                    })
                    .catch(error => {
                        console.error(error);
                    });

            });

        }// End createEditors

        function ccms_saveEditorChanges(editor) {
            parent.saving();
            return new Promise(resolve => {
                const promise = ccms_updateArea(editor);
                promise.then((value) => {
                    parent.doneSaving();
                });
                resolve();
            });
        }

        function ccms_updateArea(editor) {
            return new Promise(resolve => {
                const sourceElement = editor.sourceElement;
                const id = sourceElement.getAttribute("data-ccms-ceid");

                const item = { Id: id, Html: editor.getData() };

                if (ccms_editibleAreas.length === 0) {
                    // First entry in the array
                    ccms_editibleAreas.push(item);
                } else {
                    // Append or update the array
                    const i = ccms_editibleAreas.findIndex((ed => ed.Id == id));

                    if (i === -1) {
                        // Append
                        const item = { Id: id, Html: editor.getData() };
                        ccms_editibleAreas.push(item);

                    } else {
                        // Update
                        ccms_editibleAreas[i].Html = editor.getData();
                    }
                }

                // Push to server if autosave is turned on.
                if (parent.getAutoSave()) {
                    const data = [];
                    data.push(item);
                    const savePromise = parent.postRegions(data);
                    savePromise.then(resolve);
                }
                else {
                    resolve();
                }
            });
        }

        $(window).bind('keydown', function (event) {
            if (event.ctrlKey || event.metaKey) {
                switch (String.fromCharCode(event.which).toLowerCase()) {
                    case 's':
                        event.preventDefault();
                        window.parent.saveChanges(null, null);

                        break;
                }
            }
        });

    </script>
</body>
</html>