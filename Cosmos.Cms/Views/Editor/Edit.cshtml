@model HtmlEditorViewModel
@using NonFactors.Mvc.Grid
@{
    Layout = "_LayoutEditor";
    ViewData["Title"] = "Editing: " + Model.Title;
}

<form class="d-flex" id="frmSave">
    @Html.AntiForgeryToken()
    <input type="hidden" asp-for="Id" />
    <input type="hidden" asp-for="SaveAsNewVersion" />
    <input type="hidden" asp-for="ArticleNumber" />
    <input type="hidden" asp-for="UrlPath" />
    <input type="hidden" asp-for="VersionNumber" />
    <input type="hidden" asp-for="Content" />
    <input type="hidden" asp-for="RoleList" />
    <input type="hidden" asp-for="Title" />
    <input type="hidden" asp-for="Published" />
</form>

<script>
    var next;
    var fileMgrPopup;
    var saveFirstModal = null;
    var versionsModal = null;

    $("#frmSave").submit(function (e) {
        e.preventDefault();
        saveChanges(null, null);
    });

    function bgEditClickCustom(command) {

        if (saveFirstModal === null) {
            saveFirstModal = new bootstrap.Modal(document.getElementById('checkSaveFirst'));
        }

        if (versionsModal === null) {
            versionsModal = new bootstrap.Modal(document.getElementById('versionList'));
        }

        switch (command) {
            case "Close":
                next = function () {
                    window.location.href = "@Url.Action("Versions", "Editor")/@Model.ArticleNumber";
                }
                $("#divSaveFirstDialog").html("Save page before closing editor?");
                saveFirstModal.show();
                break;
            case "Code":
                next = function () {
                    window.location.href = "@Url.Action("EditCode", "Editor")/@Model.Id";
                }
                $("#divSaveFirstDialog").html("Save before opening code editor?");
                saveFirstModal.show();
                break;
            case "Preview":
                next = function () {
                    window.open("@Url.Action("Preview", "Home", new {Model?.Id})");
                }
                $("#divSaveFirstDialog").html("Save page before opening preview?");
                saveFirstModal.show();
                break;
        }
    }

    function getLocalTimeZone() {
        var datetime = new Date();
        var dateTimeString = datetime.toString();
        var timezone = dateTimeString.substring(dateTimeString.indexOf("(") - 1);
        return timezone;
    }

    function setupFrame() {
        var iframe = document.getElementById("ccmsContFrame");
        var iframeWin = iframe.contentWindow || iframe.contentDocument.parentWindow;
        if (iframeWin.document.body) {
            iframe.height = iframeWin.document.documentElement.scrollHeight || iframeWin.document.body.scrollHeight;

            // disable all links
            var contents = $("#ccmsContFrame").contents();

            var anchors = contents.find("a");

            $(anchors).click(function (e) {
                e.preventDefault();
                alert("Links are disabled while in edit mode.");
            });

            var editors = contents.find("[data-ccms-ceid]");

            $(editors).css("border", "dashed 1px #dadada");
        }
    };

    $(document).ready(function (e) {

        $("#btnCcmsCodeEditor").show();

        $("#liBtnVersions").show();

        $("#btnVersions").attr("href", "/Editor/Versions/" + $("#ArticleNumber").val() + "?versionNumber=" + $("#VersionNumber").val());

    });

    function saveChanges(myModal, next) {

        saving();

        if (typeof (myModel) !== "undefined" && myModel !== null) {
            myModal.hide();
        }

        var contents = $("#ccmsContFrame").contents();

        var editorContainers = contents.find("[data-ccms-ceid]");
        $(editorContainers).css("border", "");

        var iframe = document.getElementById("ccmsContFrame");

        var updates = [];

        iframe.contentWindow.editors.forEach(function (e, index) {
            var id = iframe.contentWindow.editorIds[index];
            updates.push(e.getData());
            //e.destroy();
        });

        iframe.contentWindow.editorIds.forEach(function (id, index) {
            var elements = contents.find("[data-ccms-ceid='" + id + "']");
            var el = elements[0];
            var html = updates[index];
            el.innerHTML = html;
        });

        var div = contents.find("[ccms-content-id='@Model.Id']");
        var cont = div[0];

        // Save content
        $("#Content").val(cont.innerHTML);
        
        $("#Title").val($("#tbTitle").val());
        $("#Published").val($("#tbPublished").val());

        var form = $('#frmSave');

        var data = $("#frmSave").serialize();

        $.post("@Url.Action("Edit")",
            data,
            function (response) {

                doneSaving();

                // Renable editors
                $(editorContainers).css("border", "dashed 1px #dadada");

                iframe.contentWindow.createEditors();

                if (response.IsValid) {
                    if (typeof (next) !== "undefined" && next !== null) {
                        next();
                        toastMsg("Successfully saved.");
                    }

                    // Reload the changed data.
                    $("#Id").val(response.Model.Id);
                    $("#ArticleNumber").val(response.Model.ArticleNumber);
                    $("#UrlPath").val(response.Model.UrlPath);
                    $("#VersionNumber").val(response.Model.VersionNumber);
                    $("#Content").val(response.Model.Content);
                    $("#RoleList").val(response.Model.RoleList);
                    $("#Title").val(response.Model.Title);
                    $("#Published").val(response.Model.Published);

                    // Reload the frame
                    iframe.load("/Editor/CcmsContent/" + response.Model.Id);

                }
                else {
                    var errorMsg = "<h5>Error(s) detected while saving:</h5>";

                    // Invalid response.
                    $.each(response.Errors,
                        function (index, error) {
                            errorMsg = "<p>" + error.Key + "</p><ul>";
                            $.each(error.Errors,
                                function (index, innerError) {
                                    errorMsg = errorMsg + "<li>" + innerError.ErrorMessage + "</li>";
                                });
                            errorMsg = errorMsg + "</ul>";
                        });
                    $("#divErrorLog").html(errorMsg);
                    var errorModal = new bootstrap.Modal(document.getElementById('modalSavingError'));
                    errorModal.show();
                }
            });

    }


    $(window).bind('keydown', function (event) {
        if (event.ctrlKey || event.metaKey) {
            switch (String.fromCharCode(event.which).toLowerCase()) {
                case 's':
                    event.preventDefault();
                    $("#frmSave").submit();
                    break;
            }
        }
    });
</script>

<iframe id="ccmsContFrame" src="/Editor/CcmsContent/@Model.Id" style="position: absolute; top: 52px; width: 100%; margin:0px; padding:0px;z-index:1;" onload="setupFrame()" frameBorder="0" scrolling="no"></iframe>

<div class="modal" id="modalSavingError" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Error</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="divErrorLog"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
@if (Model != null)
{
    <div class="modal" id="versionList" tabindex="-2">
        <div class="modal-dialog">
            <div class="modal-header">
                <h5 class="modal-title">Article Versions</h5>
            </div>
            <div class="modal-body">
                @Html.AjaxGrid(Url.Action("Versions", "Editor", new { Id = Model.ArticleNumber }))
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
}