@model HtmlEditorViewModel
@{
    Layout = "_LayoutEditor";
    ViewData["Title"] = "Editing: " + Model.Title;
}

<form class="d-flex" id="frmSave">
    @Html.AntiForgeryToken()
    <input type="hidden" asp-for="Id" />
    <input type="hidden" asp-for="SaveAsNewVersion" />
    <input type="hidden" asp-for="ArticleNumber" />
    <input type="hidden" asp-for="UrlPath" />
    <input type="hidden" asp-for="VersionNumber" />
    <input type="hidden" asp-for="RoleList" />
    <input type="hidden" asp-for="Title" />
    <input type="hidden" asp-for="Published" />
</form>

<script src="/lib/monaco-editor/min/vs/loader.js"></script>
<script src="/lib/emmet-monaco-es/dist/emmet-monaco.min.js"></script>

<iframe id="ccmsContFrame" src="/Editor/CcmsContent/@Model.Id" style="position: absolute; top: 52px; width: 100%; margin:0px; padding:0px;z-index:1;" onload="setupFrame()" frameBorder="0" scrolling="yes"></iframe>

<div class="modal" id="modalSavingError" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Error</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="divErrorLog"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@if (Model != null)
{
    <div class="modal" id="versionList" tabindex="-2">
        <div class="modal-dialog">
            <div class="modal-header">
                <h5 class="modal-title">Article Versions</h5>
            </div>
            <div class="modal-body">
                @* @Html.AjaxGrid(Url.Action("Versions", "Editor", new { Id = Model.ArticleNumber }))*@
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>

    <div class="modal" id="modalVsCode" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content bg-dark text-white">
                <div class="modal-body" style="height: 80vh;position:relative;">
                    <div class="navbar">
                        <div class="container-fluid">
                            <div class="navbar-brand text-light">
                                <img src="/images/vscode.png" alt="Logo" height="20" class="d-inline-block align-text-top">
                                Code Editor
                            </div>
                            <div class="d-flex">
                                <button type="button" class="btn btn-sm btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                <button id="btnApply" type="button" class="btn btn-sm btn-secondary" data-bs-dismiss="modal">Apply</button>
                            </div>
                        </div>
                    </div>                    
                    <div id="editspace" class="m-editor-container" style="height: 80vh;"></div>
                </div>
            </div>
        </div>
    </div>
}

<script>

    // Monaco Editor
    let editor;
    // CK Editor
    let ckeditor = null;
    
    // CONSTANTS
    // Modals
    const versionsModal = new bootstrap.Modal(document.getElementById('versionList'));
    const vsCodeModal = new bootstrap.Modal(document.getElementById('modalVsCode'));

    $("#frmSave").submit(function (e) {
        e.preventDefault();
        saveChanges(null, null);
    });

    function bgEditClickCustom(command) {

        var modelId = $("#Id").val();

        switch (command) {
            case "Close":
                // Note: 'next' is defined in _LayoutEditor.cshtml.
                next = function () {
                    window.location.href = "@Url.Action("Versions", "Editor")/@Model.ArticleNumber";
                }
                $("#divSaveFirstDialog").html("Save page before closing editor?");
                checkFirstModal.show();
                break;
            case "Code":
                next = function () {
                    window.location.href = "@Url.Action("EditCode", "Editor")/" + modelId;
                }
                $("#divSaveFirstDialog").html("Save before opening code editor?");
                checkFirstModal.show();
                break;
            case "Preview":
                next = function () {
                    window.open("@Url.Action("Preview", "Home")/" + modelId);
                }
                $("#divSaveFirstDialog").html("Save page before opening preview?");
                checkFirstModal.show();
                break;
        }
    }

    function getLocalTimeZone() {
        var datetime = new Date();
        var dateTimeString = datetime.toString();
        var timezone = dateTimeString.substring(dateTimeString.indexOf("(") - 1);
        return timezone;
    }

    function setupFrame() {
        var iframe = document.getElementById("ccmsContFrame");
        var iframeWin = iframe.contentWindow || iframe.contentDocument.parentWindow;
        if (iframeWin.document.body) {

            iframe.height = window.innerHeight - document.getElementById("ccmsNavMenu").clientHeight;

            // disable all links
            var contents = $("#ccmsContFrame").contents();

            var anchors = contents.find("a");

            $(anchors).click(function (e) {
                e.preventDefault();
                alert("Links are disabled while in edit mode.");
            });

            var editors = contents.find("[data-ccms-ceid]");

            $(editors).css("border", "dashed 1px #dadada");
        }

        // Close loading spiner and display saved status
        $("#divTitleGroup").show();
        $("#divPublihedTitleGroup").show();
        $("#spinLoading").hide();
        $("#btnSavingStatus").show();
    };

    $(document).ready(function (e) {
                
        $("#lblTitle").html("Page URL: ");
        $("#modalChgTitleHeader").html("Change page URL: ");
        $("#newTitle").html("New page URL: ");

        if ($("#UrlPath").val() != "root") {
            $("#divUrlTitleExamples").show();
        }

        $("#btnCcmsCodeEditor").show();

        $("#liBtnVersions").show();

        $("#btnVersions").attr("href", "/Editor/Versions/" + $("#ArticleNumber").val() + "?versionNumber=" + $("#VersionNumber").val());

        $("#btnApply").click(function (e) {
            var data = editor.getValue();
            ckeditor.data.set(data);
            saveChanges(null, null);
        });
    });

    $(window).bind('keydown', function (event) {
        if (event.ctrlKey || event.metaKey) {
            switch (String.fromCharCode(event.which).toLowerCase()) {
                case 's':
                    event.preventDefault();
                    $("#frmSave").submit();
                    break;
            }
        }
    });

    function postRegions(data) {
        return new Promise(function (resolve, reject) {
            var id = $("#Id").val();
            var model = { Id: id, Regions: data };

            var json = JSON.stringify(model);

            $.ajax({
                type: "POST",
                url: "@Url.Action("PostRegions")",
                /* jQuery will not send JSON unless you explicitly tell it to */
                data: json,
                /* contentType is important for MVC to be able to unpack the json */
                contentType: 'application/json',
                accept: 'application/json'
            }).done(resolve).fail(reject);

        });
    }

    function saveChanges(myModal, next) {

        return new Promise(function (resolve, reject) {
            saving();

            const iframe = document.getElementById("ccmsContFrame");

            const ccms_editibleAreas = iframe.contentWindow.ccms_editibleAreas;

            if (typeof (ccms_editibleAreas) !== "undefined" && ccms_editibleAreas.length > 0) {
                postRegions(ccms_editibleAreas);
            }

            if (typeof (myModel) !== "undefined" && myModel !== null) {
                myModal.hide();
            }

            const contents = $("#ccmsContFrame").contents();

            const editorContainers = contents.find("[data-ccms-ceid]");
            $(editorContainers).css("border", "");

            const updates = [];

            iframe.contentWindow.ccms_editors.forEach(function (e, index) {
                const id = iframe.contentWindow.ccms_editorIds[index];
                updates.push(e.getData());
                //e.destroy();
            });

            iframe.contentWindow.ccms_editorIds.forEach(function (id, index) {
                const elements = contents.find("[data-ccms-ceid='" + id + "']");
                const el = elements[0];
                const html = updates[index];
                if (typeof html !== "undefined") {
                    el.innerHTML = html;
                }
            });

            const div = contents.find("[ccms-content-id='@Model.Id']");
            const cont = div[0];

            // Save content
            $("#Content").val(cont.innerHTML);

            $("#Published").val($("#tbPublished").val());

            const form = $('#frmSave');

            let data = $("#frmSave").serialize();

            $.post("@Url.Action("Edit")",
                data,
                function (response) {

                    doneSaving();

                    // Renable editors
                    $(editorContainers).css("border", "dashed 1px #dadada");

                    // Below not needed
                    //iframe.contentWindow.ccms_createEditors();

                    if (response.IsValid) {
                        if (typeof (next) !== "undefined" && next !== null) {
                            next();
                            toastMsg("Successfully saved.");
                        }

                        // Reload the changed data.
                        $("#Id").val(response.Model.Id);
                        $("#ArticleNumber").val(response.Model.ArticleNumber);
                        $("#UrlPath").val(response.Model.UrlPath);
                        $("#VersionNumber").val(response.Model.VersionNumber);
                        $("#Content").val(response.Model.Content);
                        $("#RoleList").val(response.Model.RoleList);
                        $("#Title").val(response.Model.Title);
                        $("#divTitle").html(response.Model.Title);
                        $("#Published").val(response.Model.Published);

                    }
                    else {
                        var errorMsg = "<h5>Error(s) detected while saving:</h5>";

                        // Invalid response.
                        $.each(response.Errors,
                            function (index, error) {
                                errorMsg = "<p>" + error.Key + "</p><ul>";
                                $.each(error.Errors,
                                    function (index, innerError) {
                                        errorMsg = errorMsg + "<li>" + innerError.ErrorMessage + "</li>";
                                    });
                                errorMsg = errorMsg + "</ul>";
                            });
                        $("#divErrorLog").html(errorMsg);
                        const errorModal = new bootstrap.Modal(document.getElementById('modalSavingError'));
                        errorModal.show();
                    }
                }).done(resolve).fail(reject);
        });
    }

    $(window).bind('keydown', function (event) {
        if (event.ctrlKey || event.metaKey) {
            switch (String.fromCharCode(event.which).toLowerCase()) {
                case 's':
                    event.preventDefault();
                    $("#frmSave").submit();
                    break;
            }
        }
    });

    window.addEventListener('resize', function (event) { setupIframe(); }, true);

    function openVsCodeBlockEditor(ed) {
        ckeditor = ed;

        $("#editspace").html("");

        if (typeof ckeditor === "undefined" || ckeditor === null) {
            alert("Error: Could not open HTML editor.");
            return;
        }

        vsCodeModal.show();


        // Monaco AMD Editor  - https://microsoft.github.io/monaco-editor/
        require.config({ paths: { 'vs': '/lib/monaco-editor/min/vs' } });

        //require.config({ paths: { vs: '/lib/node_modules/monaco-editor/dist' } }); // Emmet Abbr.
        require(['vs/editor/editor.main'],
            function () {

                var code = ckeditor.getData();
                emmetMonaco.emmetHTML(monaco);
                editor = monaco.editor.create(document.getElementById('editspace'),
                    {
                        language: "html",
                        theme: "vs-dark",
                        value: code
                    });
            });
    }

    function openPickPageModal(ed) {
        ckeditor = ed;

        if (typeof ckeditor === "undefined" || ckeditor === null) {
            alert("Error: Could not open HTML editor.");
            return;
        }

        $("#combobox").val("");
        $("#inputLinkText").val("");
        $("#switchNewWindow").prop('checked', false);
        $("#inputLinkCss").val("");
        $("#inputLinkStyle").val("");

        pickPageModal.show();
    }

    function openInsertFileLinkModel(ed) {
        ckeditor = ed;

        if (typeof ckeditor === "undefined" || ckeditor === null) {
            alert("Error: Could not open HTML editor.");
            return;
        }

        openSelectFileModal("file", insertFileLink);
    }

    function openInsertImageModel(ed) {
        ckeditor = ed;

        if (typeof ckeditor === "undefined" || ckeditor === null) {
            alert("Error: Could not open HTML editor.");
            return;
        }

        openSelectFileModal("image", insertImage);
    }

    function insertPageLink() {
        
        if (typeof ckeditor === "undefined" || ckeditor === null) {
            alert("Error: Could not open HTML editor.");
            return;
        }

        const inputLinkText = $("#inputLinkText").val();
        const switchNewWindow = $("#switchNewWindow").prop('checked');
        const inputLinkCss = $("#inputLinkCss").val();
        const inputLinkStyle = $("#inputLinkStyle").val();

        if (typeof (inputLinkText) === "undefined" || inputLinkText === null || inputLinkText === "") {
            $("#inputLinkTextError").show();
            return false;
        }

        pickPageModal.hide();

        // Change the model using the model writer.
        ckeditor.model.change(writer => {

            const viewFragment = ckeditor.data.processor.toView("<a target='_blank' href='/" + selectedAnchorData.url + "'>" + inputLinkText + "</a>");

            const anchor = ckeditor.data.toModel(viewFragment);
            ckeditor.model.insertContent(anchor);
            ckeditor.editing.view.focus();
        });
    }

    function insertFileLink (path) {
        // Change the model using the model writer.
        ckeditor.model.change(writer => {

            const url = fileBaseUrl + "/" + path;

            const viewFragment = ckeditor.data.processor.toView("<a href='" + url + "'>" + path + "</a>");

            const anchor = ckeditor.data.toModel(viewFragment);
            ckeditor.model.insertContent(anchor);
            ckeditor.editing.view.focus();

            clearFileMgrPaths();
        });
    }
    
    function insertImage (path) {
        // Change the model using the model writer.
        ckeditor.model.change(writer => {
            
            const url = fileBaseUrl + "/" + path;

            const viewFragment = ckeditor.data.processor.toView("<img src='" + url + "' />");

            const anchor = ckeditor.data.toModel(viewFragment);
            ckeditor.model.insertContent(anchor);
            ckeditor.editing.view.focus();

            clearFileMgrPaths();
        });
    }

</script>
