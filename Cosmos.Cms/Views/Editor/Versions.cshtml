@using Cosmos.Cms.Services
@using NonFactors.Mvc.Grid
@model IQueryable<ArticleVersionViewModel>
@{
    // /Views/Editor/Versions
    ViewData["Title"] = @ViewData["ArticleTitle"] + "Page Versions";
    var isReviewer = User.IsInRole("Reviewers");
    var isAuthor = User.IsInRole("Authors");
}

<div class="container mt-5 pt-2">
    <div class="row">
        <div class="col-md-12">
            <h3>Versions for: &quot;@ViewData["ArticleTitle"]&quot;</h3>

            <a title="Return to page list" class="mt-2" href="@Url.Action("Index")">Page list <i class="fa-solid fa-circle-arrow-right"></i></a>
        </div>
    </div>
    <hr />
    <div class="row">
        <div class="col-md-6">
            @if (!isReviewer)
            {
                <a id="btnNewVersion" class="btn btn-sm btn-secondary"
               title="New version created from the lastest."
               asp-action="CreateVersion" asp-route-id="@ViewData["ArticleId"]">New</a>
            }
        </div>
        <div class="col-md-6 d-flex justify-content-end">
            <button id="btnCompare" class="btn btn-sm btn-secondary" title="Compare two versions." type="button" disabled>Compare</button>
            <button id="btnClear" class="btn btn-sm btn-secondary" title="Clear selection." type="button" disabled>Clear</button>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            @(
                Html.Grid(Model)
                .Build(c =>
                {
                    c.Add().RenderedAs((r, row) => $"<input type='checkbox' class='gridCheckBox' data-ccms-id='{r.Id}'>").Encoded(false).Titled("").Width("30px");
                    c.Add(i => i.VersionNumber).RenderedAs(r => "v." + r.VersionNumber).Titled("").Width("30px").Filterable(false);
                    // Preview
                    c.Add(i => i.Id)
                    .RenderedAs(r => "<a class='btn btn-sm btn-secondary' target='_blank' title='Preview' href='/Home/Preview/" + r.Id + "'><i class='fas fa-search'></i></a>" +
                    // Code editor (Monaco)
                    (((isAuthor && r.Published != null) || (isReviewer)) ? "" : "<a class='btn btn-sm btn-secondary' title='Open code editor' href='/Editor/EditCode/" + r.Id + "'><i class='fa-solid fa-code'></i></a>") +
                    // Html WYSIWYG editor
                    (((isAuthor && r.Published != null) || (isReviewer) || r.UsesHtmlEditor == false) ? "" :
                    "<a class='btn btn-sm btn-secondary' title='Open Html WYSIWYG editor' href='/Editor/Edit/" + r.Id + "'><i class='fa-brands fa-html5'></i></a>") +
                    // Export
                    ((isReviewer) ? "" : "<a class='btn btn-sm btn-secondary' title='Open Html WYSIWYG editor' href='/Editor/ExportPage/" + r.Id + "'><i class='fa-solid fa-cloud-arrow-down'></i></a>")
                    )
                    .Titled("")
                    .Width("160px")
                    .Encoded(false).Sortable(false).Filterable(false);
                    c.Add(i => i.Updated).Filterable(GridFilterType.Double).Css("toLocalTimeZone");
                    c.Add(i => i.Published).Filterable(GridFilterType.Double).Css("toLocalTimeZone").RenderedAs(r => r.Published.HasValue ? r.Published : "DRAFT");
                    c.Add(i => i.Expires).Filterable(GridFilterType.Double).Css("toLocalTimeZone");
                    // Promoteto new version
                    c.Add(i => i.Id)
                    .RenderedAs(r => ((isAuthor && r.Published != null) || (isReviewer)) ? "" :
                    $"<a class='btn btn-sm btn-secondary' title='Promote this version to the latest version and put it in edit mode' href='/Editor/CreateVersion?id={ViewData["ArticleId"]}&entityId=" + r.Id + "'><i class='fa fa-arrow-circle-up'></i></a>")
                    .Titled("Promote")
                    .Width("30px")
                    .Encoded(false).Sortable(false).Filterable(false);
                })
                .Using(NonFactors.Mvc.Grid.GridFilterMode.Header)
                .Empty("No versions found")
                .Filterable()
                .Sortable()
                .Pageable()
                )
        </div>
    </div>

    <div class="row">
        <div class="col">
            <a title="Return to page list" class="mt-2" href="@Url.Action("Index")">Page list <i class="fa-solid fa-circle-arrow-right"></i></a>
        </div>
    </div>
</div>

<script>

    let ids = [];

    function getId(checkbox) {
        return $(checkbox).attr('data-ccms-id');
    }

    function saveId(id) {
        // Avoid duplicates
        if (ids.indexOf(id) == -1) {
            ids.push(id);
        }
        localStorage.setItem("ids", JSON.stringify(ids));
    }

    function removeId(id) {
        var tmp = ids.filter(function (value) {
            return value !== id;
        });
        ids = tmp;
        localStorage.setItem("ids", JSON.stringify(ids));
    }

    function clearIds() {
        ids = [];
        localStorage.removeItem("ids");
    }

    // Reload selected ids from local storage
    function reloadIds() {
        var data = localStorage.getItem("ids");

        if (typeof (data) === "undefined" || data === null || data === "") {
            ids = [];
        } else {
            ids = JSON.parse(data);
        }
    }

    function resetButtons() {

        $(".gridCheckBox").each(function (index, element) {

            var id = getId(element);

            if ($(element).is(':checked')) {
                saveId(id);
            } else {
                removeId(id);
            }

        });

        // Get the array length
        var arrayLength = ids.length;

        if (arrayLength > 0) {
            $("#btnClear").prop('disabled', false);
        } else {
            $("#btnClear").prop('disabled', true);
        }

        if (arrayLength === 2) {
            $("#btnCompare").prop('disabled', false);
        } else {
            $("#btnCompare").prop('disabled', true);
        }
                
    }

    $(document).ready(function () {
        $(".toLocalTimeZone").each(function (index, element) {
            $(element).html(getLocalTime($(element).html()));
        });

        $(".gridCheckBox").each(function (index, element) {

            var id = getId(element);

            if ((ids.indexOf(id) > -1)) {
                $(element).prop('checked', true);
            }

            $(element).on("change", function () {

                resetButtons();
            });

        });

        $("#btnClear").click(function () {
            $(".gridCheckBox").each(function (index, element) {
                $(element).prop('checked', false);
            });
            clearIds();
            resetButtons();
        });


        $("#btnCompare").click(function () {
            reloadIds();
            window.location.href = "/Editor/Compare?leftId=" + ids[0] + "&rightId=" + ids[1];
        });
    });
</script>