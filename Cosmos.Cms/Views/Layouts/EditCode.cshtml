@model LayoutCodeViewModel
@{
    Layout = "_LayoutCodeEditor";
    ViewData["Title"] = Model.EditorTitle;
}

<form id="codeForm" asp-action="EditCode">
    <input type="hidden" asp-for="Id"/>
    <input type="hidden" asp-for="EditingField"/>
    <input type="hidden" asp-for="Head"/>
    <input type="hidden" asp-for="HtmlHeader"/>
    <input type="hidden" asp-for="FooterHtmlContent" />
    <input type="hidden" asp-for="EditorType" />
</form>
<script>
    var editorSaveSignal = "LayoutSaved";
    var editorType = "LayoutEditor";

    function btnCustomClick(e) {
        switch (e.target.text()) {
        case "Preview":
            window.open("@Url.Action("Preview", "Layouts", new {Model.Id})");
            break;
        case "Layouts":
            window.location.href = "@Url.Action("Index", "Layouts", new {Model.Id})";
            break;
        }
    }

    function closeEditor() {
        window.location.href = "@Url.Action("Index", "Layouts")";
    }

    // Used by signalR to re-load an article
    function ccmsLoadModel(model) {

        // get all the inputs into an array.
        var inputs = [@(Html.Raw(string.Join(",", Model.EditorFields.Select(s => "\"" + s.FieldId + "\"").ToArray()))) ];

        // not sure if you wanted this, but I thought I'd add it.
        // get an associative array of just the values.
        inputs.forEach(function (item) {
            var c = model[item];
            $("#" + item).val(c);
        });

        //$("#Id").val(model.Id);
        //var id = $("#Id");
        //var content = $("#Content");
        //var hjs = $("#HeaderJavaScript");
        //var fjs = $("#FooterJavaScript");

        //content.val(model.Content);
        //hjs.val(model.HeaderJavaScript);
        //fjs.val(model.FooterJavaScript);

        var activeTab = $(".tabitem.nav-link.active");
        var name = $(activeTab).attr("data-ccms-fieldname");
        createAndLoadEditor(name);// tabOnSelect on _LayoutCodeEditor
    }
</script>