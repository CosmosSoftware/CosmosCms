@model FileManagerEditCodeViewModel
@{
    Layout = "_LayoutCodeEditor";
    ViewData["Title"] = Model.EditorTitle;
}

<form id="codeForm" asp-action="EditCode" method="post">
    @Html.AntiForgeryToken()
    <input type="hidden" asp-for="Id" />
    <input type="hidden" asp-for="EditingField" />
    <input type="hidden" asp-for="Content" />
    <input type="hidden" asp-for="Path" />
    <input type="hidden" asp-for="EditorMode" />
    <input type="hidden" asp-for="EditingField" />
    <input type="hidden" asp-for="EditorTitle" />
    <input type="hidden" asp-for="EditorFields" />
    <input type="hidden" asp-for="EditorType" />
</form>

<script>

    var editorSaveSignal = "FileSaved";
    var editorType = "FileEditor";

    function btnCustomClick(e) {
        //switch (e.target.text()) {
        //case "Preview":
        //    // Open in new window.
        //    window.open("@Url.Action("Preview", "Home", new {Model.Id})");
        //    break;
        //case "Html":
        //    $("#htmlEditorDialog").data("kendoDialog").open();
        //    break;
        //case "Versions":
        //    $("#versionsDialog").data("kendoDialog").open();
        //    break;
        //case "Help":
        //    //window.open("https://cosmos.azureedge.net/edit_page#CodeEditor");
        //    break;
        //case "Export":
        //    window.location.href = "@Url.Action("ExportPage", "Editor")/@Model.Id";
        //    break;
        //case "Import":
        //     if (ccmsEditorIsLocked === true) {
        //        alert("Import page while it is locked by another.");
        //     } else {
        //        ccmsSendSignal("SetItemLock");
        //        window.open("@Url.Action("ImportPage", "FileManager", new {Model.Id})", '_blank', 'height=510,width=1200,menubar=no,location=no,status=no,titlebar=no,toolbar=no');
        //     }
        //    break;
        //}
    }

    // Used by signalR to re-load an article
    function ccmsLoadModel(model) {

        // get all the inputs into an array.
        var inputs = [@(Html.Raw(string.Join(",", Model.EditorFields.Select(s => "\"" + s.FieldId + "\"").ToArray()))) ];

        // not sure if you wanted this, but I thought I'd add it.
        // get an associative array of just the values.
        inputs.forEach(function (item) {
            var c = model[item];
            $("#" + item).val(c);
        });

        var activeTab = $(".tabitem.nav-link.active");
        var name = $(activeTab).attr("data-ccms-fieldname");
        createAndLoadEditor(name);// tabOnSelect on _LayoutCodeEditor
    }

    function closeEditor() {
        window.location.href = "@Url.Action("Index", "FileManager")";
    }

    function htmlEditor() {
        //window.location.href = "@Url.Action("Edit", "Editor", new {Model.Id})";
    }

    function goVersions() {
    }

    // PUBLISHING METHODS
    function onPubNow(e) {
        var now = new Date();
        now = now.toUTCString();
        $("#Published").val(now);
        loadPublishLocalDateTime();
    }
    // SCHEDULING PUBLISHING UTILITIES
    function loadPublishLocalDateTime() {
        var published = $("#Published").val();
        var publishButton = $("#btnPublish");
        if (published !== null && typeof (published) !== "undefined" && published.trim() !== "") {

            if (!published.endsWith("Z") && !published.endsWith("GMT")) {
                published += " GMT";
            }

            var localDateTime = new Date(published);
            var dateTimePicker = $("#dtPublished").data("kendoDateTimePicker");
            dateTimePicker.value(localDateTime);
            var now = new Date();

            if (now < localDateTime) {
                //publishButton.attr("class", "k-button k-primary");
                publishButton.html("Pending");
                $(publishButton).kendoTooltip({
                    content: "This version is set to be published in the future at: " + localDateTime.toLocaleString() + ". Click to change."
                });
            } else {
                //publishButton.attr("class", "k-button k-success");
                publishButton.html("Published");
                $(publishButton).kendoTooltip({
                    content: "This version is now published and available on the web as of: " + localDateTime.toLocaleString() + ". Click to change."
                });
            }
        } else {
            //publishButton.attr("class", "k-button k-alert");
            publishButton.html("DRAFT");
            $(publishButton).kendoTooltip({
                content: "This version is not yet published. Click to schedule publishing date and time."
            });
        }
    }

    function openSchedulerDialog() {
        $("#schedulingDialog").data("kendoDialog").open();
    }

    function cancelPublish() {
        var dateTimePicker = $("#dtPublished").data("kendoDateTimePicker");
        dateTimePicker.value("");
    }

    function savePublishDateTime() {
        // Save date/time
        var dateTimePicker = $("#dtPublished").data("kendoDateTimePicker");
        var dateTimeValue = dateTimePicker.value();

        if ($("#Published").val() !== dateTimeValue) {
            $("#pendingChangesBadge").show();
        }

        // Note, this saves the date/time using local time (of the user's computer).
        // The server stores this as UTC time.
        if (dateTimeValue !== null && dateTimeValue !== "null" && dateTimeValue !== "") {
            var datetime = new Date(dateTimeValue);
            var utcString = datetime.toUTCString();
            $("#Published").val(utcString);
            $("#btnPublish").html("Published");
        } else {
            $("#btnPublish").html("DRAFT");
            $("#Published").val("");
        }

        //loadPublishLocalDateTime();
    }

    function cancelPublishDateTime() {
        loadPublishLocalDateTime();
        $("#schedulingDialog").data("kendoDialog").close();
    };
</script>
