@using NonFactors.Mvc.Grid
@model IQueryable<Cosmos.BlobService.FileManagerEntry>
@{
    ViewData["Title"] = "Files List";

    var publisherUrl = ViewData["PublisherUrl"];
    var isReviewer = User.IsInRole("Reviewers");
    var canEdit = User.IsInRole("Administrators") || User.IsInRole("Editors");
    var pathPrefix = (string)ViewData["PathPrefix"];
    var pathParts = new List<string>();

    if (!string.IsNullOrEmpty(pathPrefix) && pathPrefix != "/")
    {
        pathParts.AddRange(pathPrefix.Trim('/').Split('/'));
    }

}
<link href="~/lib/filepond/filepond.css" rel="stylesheet" />
<script src="~/js/clipboard.min.js"></script>
<div class="container mt-5 pt-2">
    <div class="row">
        <div class="col">
            <h3>@ViewData["Title"]</h3>
            <hr />
        </div>
    </div>
    @if (pathPrefix.StartsWith("/pub"))
    {
        <div class="row">
            <div class="col-md-12">
                <!-- Filepond File Uploader -->
                <input type="file"
                   class="filepond"
                   id="filepond"
                   name="files" data-file-metadata-path="@ViewData["PathPrefix"]"
                   multiple>
            </div>
        </div>
    }
    <div class="row">
        <div class="col-md-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/FileManager/Index?target=/"><i class="fa-solid fa-house"></i></a></li>
                    @{
                        var p = "";
                    }
                    @foreach (var item in pathParts)
                    {
                        if (item != "/")
                        {
                            p += "/" + item;
                            <li class="breadcrumb-item"><a href="/FileManager/Index?target=@p">@item</a></li>
                        }
                    }
                </ol>
            </nav>
        </div>
    </div>
    <div class="row">
        <div class="col-md-9">
            <div class="btn-group" role="group" aria-label="Basic example">
                <button id="btnRename" type="button" class="btn btn-sm btn-secondary" onclick="btnClick('rename')" disabled>Rename</button>
                <button id="btnMove" type="button" class="btn btn-sm btn-secondary" onclick="btnClick('move')" disabled>Move</button>
                <button id="btnDelete" type="button" class="btn btn-sm btn-secondary" onclick="btnClick('delete')" disabled>Delete</button>
            </div>
        </div>
        <div class="col-md-3">
            @if (pathPrefix.StartsWith("/pub"))
            {
                <form class="d-flex" asp-action="NewFolder" method="post">
                    <input type="hidden" name="ParentFolder" id="ParentFolder" value="@ViewData["PathPrefix"]" />
                    <input class="form-control form-control-sm me-2" name="FolderName" id="FolderName" type="text" placeholder="New folder name" aria-label="New folder name" />

                    <button class="btn btn-sm btn-secondary" type="submit">Create</button>
                </form>
            }
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            @(Html.Grid(Model)
                .Build(col =>
                {
                    col.Add().RenderedAs((r, row) => $"<input type='checkbox' class='gridCheckBox' data-ccms-blob='{r.Path.Trim('/')}'>").Encoded(false).Titled(Html.CheckBox("_checkAll")).Width("30px");
                    col.Add().RenderedAs(r => r.IsDirectory ? "<a href='/FileManager/Index?target=" + r.Name + "'><i class='fa-solid fa-folder'></i></a>" : "<div><i class='fa-solid fa-file'></i></div>").Titled("").Width("30px").Encoded(false).Sortable(false).Filterable(false);
                    col.Add(r => r.Name).RenderedAs(r => r.IsDirectory ? "<a href='/FileManager/Index?target=" + r.Path + "'>" + r.Name + "</a>" : "<a href=\"javascript:download('" + r.Path + "')\">" + r.Name + r.Extension + "</div>").Titled("Name").Encoded(false);
                    col.Add(r => r.Modified).Titled("Modified").Css("toLocalTimeZone").Filterable(GridFilterType.Double).Width("240px");

                })
                .Using(NonFactors.Mvc.Grid.GridFilterMode.Header)
                .Empty("No pages found")
                .Filterable()
                .Sortable()
                .Pageable(p => p.ShowPageSizes = true)
                )
        </div>
    </div>
</div>

<form>
    @Html.AntiForgeryToken()
    <input id="frmPathList" name="frmPathList" type="hidden" />
</form>

<!-- Before the end of the body tag -->
<script src="~/lib/filepond-plugin-file-metadata/dist/filepond-plugin-file-metadata.min.js"></script>
<script src="~/lib/filepond/filepond.min.js"></script>

<script>
    // Get a reference to the file input element
    const inputElement = document.querySelector('input[type="file"]');

    // Register meta data Plug In
    FilePond.registerPlugin(FilePondPluginFileMetadata);

    // Create a FilePond instance
    const pond = FilePond.create(inputElement, {
        chunkUploads: true,
        chunkSize: 5242880, // bytes (5 MB) - AWS S3 multi upload requires 5 MB parts. Last part can be any size
        chunkForce: true
    });

    FilePond.setOptions({
        server: "@Url.Action("Process")"
    });

    // Event handlers
    document.addEventListener('FilePond:processfiles', (e) => {
        window.location.href = "@Url.Action("Index")?target=@ViewData["PathPrefix"]";
    });

    let paths = [];

    $(document).ready(function () {
        $(".toLocalTimeZone").each(function (index, element) {
            var date = new Date($(element).html());

            if (isNaN(date)) {
                return;
            }

            $(element).html(date.toLocaleDateString() + " " + date.toLocaleTimeString());

        });

        $("#zcheckAll").on("change", function () {

            var checked = $(this).is(':checked');

            $(".gridCheckBox").each(function (index, element) {
                $(element).prop('checked', checked);
            });

            resetButtons();
        });

        $(".gridCheckBox").each(function (index, element) {
            $(element).on("change", function () {
                resetButtons();
            });
        });
    });

    function resetButtons() {

        // Reset paths
        paths = [];

        $(".gridCheckBox").each(function (index, element) {
            if ($(element).is(':checked')) {
                var path = $(element).attr('data-ccms-blob');
                paths.push(path);
            }
        });

        // Get the array length
        var arrayLength = paths.length;

        if (arrayLength > 0) {
            $("#btnDelete").prop('disabled', false);
            $("#btnDelete").prop('title', "Click to delete.");
            $("#btnMove").prop('disabled', false);
            $("#btnMove").prop('title', "Click to move.");
            $("#btnRename").prop('title', "Select only one item.");
        } else {
            $("#btnDelete").prop('disabled', true);
            $("#btnMove").prop('disabled', true);
            $("#btnRename").prop('title', "Select one item.");
        }

        if (arrayLength === 1) {
            $("#btnRename").prop('disabled', false);
            $("#btnRename").prop('title', "Click to rename.");
        } else {
            $("#btnRename").prop('disabled', true);
        }
    }

    var next = null;
    var checkFirstModal = null;

    function btnClick(command) {

        if (checkFirstModal === null) {
            checkFirstModal = new bootstrap.Modal(document.getElementById('checkFirstModal'));
        }

        // Get the array length
        var arrayLength = paths.length;

        switch (command) {
            case "delete":
                $("#checkFirstTitle").html("Delete Verification");
                if (arrayLength == 1) {
                    $("#checkFirstDialog").html("WARNING: Are you sure you want to permanently delete this item?<br />" + paths[0].split('/'));
                } else {
                    $("#checkFirstDialog").html("Are you sure you want to permanently delete " + arrayLength + " items?");
                }
                next = function () {
                    $.post('@Url.Action("Delete")',   // url
                        {
                            ParentPath: '@ViewData["PathPrefix"]',
                            Paths: paths
                        }, // data to be submit
                        function (data, status, jqXHR) {// success callback
                            window.location.href = '@Url.Action("Index")?target=@ViewData["PathPrefix"]';
                        })
                }
                break;
            case "rename":
                $("#checkFirstTitle").html("Rename Verification");
                $("#checkFirstDialog").html("Are you sure you want to rename or move this item?<br />/" + paths[0]);
                next = function () {
                    $("#originalName").val(paths[0].substring(4));
                    var modal = new bootstrap.Modal(document.getElementById('renameModal'));
                    modal.show();
                }
                break;
        }

        checkFirstModal.show();
    }

    function cancelAction() {
        checkFirstModal.hide();
    }

    function continueAction() {
        next();
    }

    function download(p) {
        window.location.href = encodeURI("@Url.Action("Download")?path=" + p);
    }

</script>

<div class="modal" id="checkFirstModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 id="checkFirstTitle" class="modal-title">Verification</h5>
            </div>
            <div class="modal-body">
                <div id="checkFirstDialog"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="continueAction()" data-bs-dismiss="modal">Yes</button>
                <button type="button" class="btn btn-secondary" onclick="cancelAction()" data-bs-dismiss="modal">No</button>
            </div>
        </div>
    </div>
</div>

<div class="modal" id="renameModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <form>
                @Html.AntiForgeryToken()
                <div class="modal-header">
                    <h5 id="checkFirstTitle" class="modal-title">Rename or Move Item</h5>
                </div>
                <div class="modal-body">
                    <label for="originalName" class="form-label">Original name:</label>
                    <div class="input-group mb-3">
                        <span class="input-group-text" id="basic-addon3">/pub/</span>
                        <input class="form-control" id="originalName" name="originalName" aria-describedby="emailHelp" disabled>
                    </div>
                    <label for="changeToName" class="form-label">Change to:</label>
                    <div class="input-group mb-3">
                        <span class="input-group-text" id="basic-addon3">/pub/</span>
                        <input title="Enter the new name of the item" class="form-control" id="changeToName" name="changeToName">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" onclick="continue()" data-bs-dismiss="modal">Yes</button>
                    <button type="button" class="btn btn-secondary" onclick="cancelAction()" data-bs-dismiss="modal">No</button>
                </div>
            </form>
        </div>
    </div>
</div>