@addTagHelper *, Kendo.Mvc
@using Cosmos.Cms.Services
@using Newtonsoft.Json
@using System.Reflection
@model Cosmos.Cms.Models.Interfaces.ICodeEditorViewModel
@{
    var buttons = Model.CustomButtons.ToArray();
    var fields = Model.EditorFields.ToArray();
    var assem = Assembly.GetExecutingAssembly();
    var assemblyName = assem.GetName();
    var assemblies = assem.GetReferencedAssemblies();

    var isArticleEditor = Model.GetType() == typeof(EditCodePostModel);

    // Used for ChatBot
    var userName = Context.User.Identity.Name;

    // Permissions configuration
    var isAuthor = false;

    if (User != null && User.IsInRole("Authors"))
    {
        isAuthor = true;
    }
    else if (User != null && User.IsInRole("Editors"))
    {
        isAuthor = false;
    }
    else if (User != null && User.IsInRole("Administrators"))
    {
        isAuthor = false;
    }
}
<!DOCTYPE html>
<html>
<head lang="en">
    <meta name="viewport" content="width=device-width" />
    <title>@ViewBag?.Title</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" integrity="sha512-9usAa10IRO0HhonpyAIVpjrylPvoDwiPUiKdWk5t3PyolY1cOd4DSE0Ga+ri4AuTroPR5aQvXU9xC6qOPnzFeg==" crossorigin="anonymous" referrerpolicy="no-referrer">
    <script src="/lib/jquery/dist/jquery.min.js"></script>
    <script src="/ccms/js/TimeUtils.js"></script>
    <script src="https://unpkg.com/emmet-monaco-es/dist/emmet-monaco.min.js"></script>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">
                <img height="28" src="~/images/logos/cosmos-logo.png" />
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            Cosmos
                        </a>
                        <ul class="dropdown-menu">
                            <li>
                                <a class="dropdown-item" href="javascript:btnMainClick('Save')">Save</a>
                            </li>
                            <li>
                                <a class="dropdown-item" href="javascript:btnMainClick('Close')">Close</a>
                            </li>
                            <li>
                                <a class="dropdown-item" href="javascript:btnMainClick('Files')">Files</a>
                            </li>
                            <li>
                                <a class="dropdown-item" href="javascript:btnMainClick('Preview')">Preview</a>
                            </li>
                        </ul>
                    </li>
                    @{
                        var aclass = "active";
                        foreach (var field in fields)
                        {
                                <li class="nav-item">
                                    <a title="@field.ToolTip" data-bs-toggle="tooltip" data-bs-placement="bottom" data-ccms-fieldname="@field.FieldName" class="tabitem nav-link @aclass" aria-current="page" onclick="tabOnSelect(this)"><span class="pageTabIcon">&lt;&gt;</span>  @field.FieldName</a>
                                </li>
                            aclass = "";
                        }
                    }
                </ul>
                @if (isArticleEditor && isAuthor == false)
                {
                    <a class="btn btn-sm btn-secondary" href="javascript:openSchedulerDialog()" id='btnPublish'></a>
                }
                <div class="btn btn-sm btn-secondary ccms-edit-lock-btn me-2">
                    Ready to Edit
                </div>
                <span id="msgBox"></span>
            </div>

            @* This button is required to by the Chat Component *@
        </div>
    </nav>
    <div id="editspace" class="m-editor-container"></div>
    @RenderBody()

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-u1OknCvxWvY5kfmNBILK2hRnQC3Pr17a+RTT6rIHI7NnikvbZlHgTPOOmMi466C8" crossorigin="anonymous"></script>
    <script src="~/lib/mvc-grid/mvc-grid.js"></script>
    <script>
        var editor;
        var fieldId;
        var fileMgrPopup = null;
        var selectedFile = "";
        var ccmsEditorIsLocked = false;

        // Example: var editFields = '[{"FieldId":"HeaderJavaScript","FieldName":"Header JavaScript","EditorMode":0},{"FieldId":"Content","FieldName":"Html Content","EditorMode":1},{"FieldId":"FooterJavaScript","FieldName":"Footer JavaScript","EditorMode":0}]';
        var editFields = @(Html.Raw(JsonConvert.SerializeObject(Model.EditorFields)));

        function tabOnSelect(element) {
            //alert("Selected: " + $(e.item).find("> .k-link").text());
            //loadEditor($(e.item).find("> .k-link").text());
            var name = $(element).attr("data-ccms-fieldname");
            $(".tabitem").removeClass("active");
            $(element).addClass("active");
            saveExistingLoadNewEditor(name);
        }

        function saveExistingLoadNewEditor(id) {
            if (editor !== null && typeof editor !== "undefined") {
                $("#" + fieldId).val(editor.getValue());
            }
            createAndLoadEditor(id);
        }

        function cancelPublishDateTime() {
            loadPublishLocalDateTime();
        };

        //
        // Creates and loads a Monaco Editor.
        //
        function createAndLoadEditor(id) {
            if (editor !== null && typeof editor !== "undefined") {
                if (editor.getModel()) {
                    editor.getModel().dispose();
                }
                $("#msgBox").html("Loading...");
                editor.dispose();
                editor = null;
            }

            fieldId = null;

            $("#EditingField").val(null);

            // Monaco AMD Editor  - https://microsoft.github.io/monaco-editor/
            require.config({ paths: { 'vs': '/lib/monaco-editor/min/vs' } });

            //require.config({ paths: { vs: '/lib/node_modules/monaco-editor/dist' } }); // Emmet Abbr.
            require(['vs/editor/editor.main'],
                function () {
                    fieldId = id;
                    var fieldInfo = editFields.find(o => o.FieldName === id);
                    fieldId = fieldInfo.FieldId;

                    var mode = null;

                    switch (fieldInfo.EditorMode) {
                        case 0:
                            mode = "javascript"
                            break;
                        case 1:
                            mode = "html"
                            break;
                        case 2:
                            mode = "css";
                            break;
                        default:
                            mode = "html"
                            break;
                    }

                    $("#EditingField").val(fieldId);
                    var hiddenInput = $("#" + fieldId);
                    var code = hiddenInput.val();
                    emmetMonaco.emmetHTML(monaco);
                    editor = monaco.editor.create(document.getElementById('editspace'),
                        {
                            language: mode,
                            theme: "vs-dark",
                            value: code
                        });
                    //editor.onDidFocusEditorWidget(function () {
                    //    if (ccmsEditorIsLocked !== true) {
                    //        ccmsSendSignal("SetArticleLock");
                    //    } else {
                    //        event.preventDefault();
                    //        alert("Cannot edit while locked by another user.");
                    //    }
                    //});
                    $("#msgBox").html("");
                });
        }

        $("#codeForm").submit(function (e) {
            e.preventDefault(); // Prevent the form from doing a post back.
            $("#saveChangesDialog").data("kendoDialog").open();

            if (@isArticleEditor.ToString().ToLower()) {

                // Saving publish date with time zone information
                savePublishDateTime();
                // Save title
                $("#Title").val($("#tbTitle").val());

            }

            if (editor) {
                $("#" + fieldId).val(editor.getValue());
            }
            //return true;
            var form = $('#codeForm');
            var action = form.attr('action');

            $.post(action,
                form.serialize(),
                function (response) {
                    $("#saveChangesDialog").data("kendoDialog").close();
                    if (response.IsValid) {
                        //ccmsSendSignal(editorSaveSignal); // Defined in the chat components partial
                        $("#changesSavedDialog").data("kendoDialog").open();
                        setTimeout(function () {
                            $("#changesSavedDialog").data("kendoDialog").close();
                        },
                            1000);
                    } else {
                        var errorMsg = "<h5>Error(s) detected while saving:</h5>";
                        // Invalid response.
                        $.each(response.Errors,
                            function (index, error) {
                                errorMsg = "<p>" + error.Key + "</p><ul>";
                                $.each(error.Errors,
                                    function (index, innerError) {
                                        errorMsg = errorMsg + "<li>" + innerError.ErrorMessage + "</li>";
                                    });
                                errorMsg = errorMsg + "</ul>";
                            });
                        $("#divErrorLog").html(errorMsg);
                        $("#saveErrorsDialog").data("kendoDialog").open();
                    }
                }
            );
        });

        function btnSelectField(e) {
            fieldName = e.target.text();
            saveExistingLoadNewEditor(e.id);
        }

        function btnMainClick(e) {
            switch (e) {
                //switch (e) {
                case "Save":
                    if (ccmsEditorIsLocked === true) {
                        alert("Cannot save while locked by another user.");
                        return;
                    }
                    $("#codeForm").submit();
                    break;
                case "Close":
                    $("#closeEditorDialog").data("kendoDialog").open();
                    break;
                case "Files":
                    if (fileMgrPopup === null) {
                        fileMgrPopup = window.open('@Url.Action("Popup", "FileManager")', '_blank', 'height=510,width=900,menubar=no,location=no,status=no,titlebar=no,toolbar=no');
                    }
                    else {
                        fileMgrPopup.focus();
                    }
                    break;
                default:
                    if (typeof btnCustomClick === "function") {
                        btnCustomClick(e);
                    }
                    break;
            }
        }

        function btnHelpClick(e) {
            switch (e.target.text()) {
                case "Basic Editing":
                    window.open("https://code.visualstudio.com/docs/editor/codebasics", "_blank");
                    break;
                case "Code Navigation":
                    window.open("https://code.visualstudio.com/docs/editor/editingevolved", "_blank");
                    break;
                case "Reformatting Code":
                    window.open("https://code.visualstudio.com/docs/editor/refactoring", "_blank");
                    break;
                case "About Monaco":
                    window.open("https://microsoft.github.io/monaco-editor/index.html", "_blank");
                    break;
            }
        }

        function onClickShowError(id) {
            $("#exceptionDetails").html($(id).html());
            $("#codeErrorDialog").data("kendoDialog").open();
        }

        function onClickShowError(id) {
            $("#exceptionDetails").html($(id).html());
            $("#editCodeDialog").data("kendoDialog").open();
        }

        $(document).ready(function () {
            var fieldId = "@Model.EditingField";
            if (fieldId !== "") {
                var fieldInfo = editFields.find(o => o.FieldId === fieldId);
                createAndLoadEditor(fieldInfo.FieldName);
                // Refresh locks for everyone including self.
                setTimeout(function () {
                    //ccmsSendSignal("NotifyRoomOfLock");
                }, 2000);
            }
            loadPublishLocalDateTime();
        });

        $(window).bind('keydown', function (event) {
            if (event.ctrlKey || event.metaKey) {
                switch (String.fromCharCode(event.which).toLowerCase()) {
                    case 's':
                        event.preventDefault();
                        $("#codeForm").submit();
                        break;
                }
            }
        });

        $(window).on("unload", function () {
            if (fileMgrPopup !== null) {
                fileMgrPopup.close();
            }
        });

        function onPubNow(e) {
            var now = new Date();
            now = now.toUTCString();
            $("#Published").val(now);
            loadPublishLocalDateTime();
        }

        // SCHEDULING PUBLISHING UTILITIES
        function openSchedulerDialog() {
            $("#schedulingDialog").data("kendoDialog").open();
        }

        function loadPublishLocalDateTime() {
            if (!@isArticleEditor.ToString().ToLower()) {
                return;
            }
            var published = $("#Published").val();
            var publishButton = $("#btnPublish");
            if (published !== null && typeof (published) !== "undefined" && published.trim() !== "") {

                if (!published.endsWith("Z") && !published.endsWith("GMT")) {
                    published += " GMT";
                }

                var localDateTime = new Date(published);
                var dateTimePicker = $("#dtPublished").data("kendoDateTimePicker");
                dateTimePicker.value(localDateTime);
                var now = new Date();

                if (now < localDateTime) {
                    //publishButton.attr("class", "k-button k-primary");
                    publishButton.html("Pending");
                    $(publishButton).kendoTooltip({
                        content: "This version is set to be published in the future at: " + localDateTime.toLocaleString() + ". Click to change."
                    });
                } else {
                    //publishButton.attr("class", "k-button k-success");
                    publishButton.html("Published");
                    $(publishButton).kendoTooltip({
                        content: "This version is now published and available on the web as of: " + localDateTime.toLocaleString() + ". Click to change."
                    });
                }
            } else {
                //publishButton.attr("class", "k-button k-alert");
                publishButton.html("DRAFT");
                $(publishButton).kendoTooltip({
                    content: "This version is not yet published. Click to schedule publishing date and time."
                });
            }
        }

        function savePublishDateTime() {
            // Save date/time
            var dateTimePicker = $("#dtPublished").data("kendoDateTimePicker");
            var dateTimeValue = dateTimePicker.value();

            if ($("#Published").val() !== dateTimeValue) {
                $("#pendingChangesBadge").show();
            }

            // Note, this saves the date/time using local time (of the user's computer).
            // The server stores this as UTC time.
            if (dateTimeValue !== null && dateTimeValue !== "null" && dateTimeValue !== "") {
                var datetime = new Date(dateTimeValue);
                var utcString = datetime.toUTCString();
                $("#Published").val(utcString);
                $("#btnPublish").html("Published");
            } else {
                $("#btnPublish").html("DRAFT");
                $("#Published").val("");
            }
        }


    </script>
    <script src="/lib/monaco-editor/min/vs/loader.js"></script>
    @await RenderSectionAsync("Scripts", false)
</body>
</html>
