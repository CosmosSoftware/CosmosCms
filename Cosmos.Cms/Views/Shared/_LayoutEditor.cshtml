@using System.Reflection
@{
    var assemblyName = Assembly.GetExecutingAssembly().GetName();
}
<!DOCTYPE HTML>
<html>
<head>
    <meta name="viewport" content="width=device-width" />

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" integrity="sha512-9usAa10IRO0HhonpyAIVpjrylPvoDwiPUiKdWk5t3PyolY1cOd4DSE0Ga+ri4AuTroPR5aQvXU9xC6qOPnzFeg==" crossorigin="anonymous" referrerpolicy="no-referrer">

    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />

    <script src="https://code.jquery.com/jquery-3.6.1.min.js" integrity="sha256-o88AwQnZB+VDvE9tvIXrMQaPlFFSUTR+nldQm1LuPXQ=" crossorigin="anonymous"></script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-u1OknCvxWvY5kfmNBILK2hRnQC3Pr17a+RTT6rIHI7NnikvbZlHgTPOOmMi466C8" crossorigin="anonymous"></script>

    <script src="/ccms/js/TimeUtils.js"></script>

    <script type="text/javascript" src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
    <!-- http://www.daterangepicker.com/ -->
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>

</head>
<body style="margin:0px;padding:0px;background-color:#4d4d4d;">

    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">
                <img height="28" src="~/images/logos/cosmos-logo.png" /> Cosmos
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item" id="btnFiles">
                        <a class="nav-link" onclick=" bgEditClick('Files')">Files</a>
                    </li>
                    <li class="nav-item" id="btnCcmsCodeEditor" style="display:none">
                        <a class="nav-link" onclick="bgEditClick('Code')">Code</a>
                    </li>
                    <li class="nav-item" id="btnPreview">
                        <a class="nav-link" onclick="bgEditClick('Preview')">Preview</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" onclick="bgEditClick('Close')">Close</a>
                    </li>
                    <li id="liBtnVersions" class="nav-item" style="display:none">
                        <a id="btnVersions" class="nav-link" target="_blank" >Versions</a>
                    </li>
                </ul>
                <span id="timeZone" class="navbar-text ms-3 me-3 fs-6"></span>
                <div id="lblTitle" class="navbar-text">Title:</div>
                <input class="form-control ms-2 me-2" style="max-width:260px;" name="tbTitle" id="tbTitle" value="@ViewData["PageTitle"]" />
                <div class="navbar-text">Published:</div>
                <input class="form-control ms-2 me-2" name="tbPublished" id="tbPublished" style="max-width:200px;" placeholder="DRAFT" value="@((DateTimeOffset?)ViewData["Published"])" />

                <div class="dropdown">
                    <button class="btn btn-secondary dropdown-toggle" type="button" id="btnSave" data-bs-toggle="dropdown" aria-expanded="false">
                        Save
                    </button>
                    <ul class="dropdown-menu dropdown-menu-dark dropdown-menu-lg-end">
                        <li><a class="dropdown-item" onclick="bgEditClick('Save')" href="#">Update</a></li>
                        <li><a class="dropdown-item" onclick="bgEditClick('Draft')" id="btnSaveAsDraft" href="#">Save as Draft</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </nav>

    <script>
        var next;
        var fileMgrPopup = null;
        var selectedFile = "";
        var saveFirstModal = null;
        var lastPublished = "@(((DateTimeOffset?)ViewData["LastPubDateTime"]))";

        function bgEditClick(command) {

            if (saveFirstModal === null) {
                saveFirstModal = new bootstrap.Modal(document.getElementById('checkSaveFirst'));
            }

            switch (command) {
                case "Draft": 
                    var published = $("#tbPublished").val();
                    if (published !== "") {
                        $("#tbPublished").val("");
                        $("#Published").val("");
                    }
                    $("#frmSave").submit();
                    break;
                case "Save":
                    $("#frmSave").submit();
                    break;
                case "Files":
                    var id = $("#ArticleNumber").val();
                    var url = "@Url.Action("Index", "FileManager")";
                    if (typeof (id) !== "undefined" && id !== null & id !== "") {
                        url += "?target=pub/articles/" + id;
                    }

                    fileMgrPopup = window.open(url, '_blank', 'height=510,width=1200,menubar=no,location=no,status=no,titlebar=no,toolbar=no');
                    break;
                default:
                    // Executes functions specific to this editor
                    bgEditClickCustom(command);
                    break;
            }
        }

        function saveFirst() {
            saveChanges(saveFirstModal, next);
        }

        function doNotSave() {
            saveFirstModal.hide();
            next();
        }

        function getLocalTimeZone() {
            var datetime = new Date();
            var dateTimeString = datetime.toString();
            var timezone = dateTimeString.substring(dateTimeString.indexOf("(") - 1);
            return timezone;
        }

        function savePublishDateTime() {
            // Save date/time
            var dateTimeValue = $('#tbPublished').val();

            if ($("#Published").val() !== dateTimeValue) {
                $("#pendingChangesBadge").show();
            }

            // Note, this saves the date/time using local time (of the user's computer).
            // The server stores this as UTC time.
            if (dateTimeValue !== null && dateTimeValue !== "null" && dateTimeValue !== "") {
                var datetime = new Date(dateTimeValue);
                var utcString = datetime.toUTCString();
                $("#Published").val(utcString);
                $("#btnPublish").html("Published");
            } else {
                $("#btnPublish").html("DRAFT");
                $("#Published").val("");
            }
        }

        $(document).ready(function () {
            var timeZoneElement = $("#timeZone");
            timeZoneElement.html(getLocalTimeZone());

            var startDate;
            if (lastPublished === "") {
                startDate = new Date();
            }
            else {
                startDate = new Date(lastPublished);
            }

            $('#tbPublished').daterangepicker({
                autoUpdateInput: false,
                timePicker: true,
                singleDatePicker: true,
                showDropdowns: true,
                minDate: startDate,
                locale: {
                    format: 'MM/DD/YYYY hh:mm A'
                }
            });

            $('#tbPublished').on('apply.daterangepicker', function (ev, picker) {
                $('#tbPublished').val(picker.startDate.format('MM/DD/YYYY hh:mm A'));
            });

            $("#btnSave").click(function () {
                if ($('#tbPublished').val() === "") {
                    $("#btnSaveAsDraft").hide();
                } else {
                    $("#btnSaveAsDraft").show();
                }
            });
        });

        // Displays a 3 second message in a bootstrap toast.
        function toastMsg(message) {
            var toast = new bootstrap.Toast(document.getElementById('liveToast'));
            $("#liveToastMsg").html(message);
            toast.show();
            setTimeout(function () {
                toast.hide();
            }, 2000);
        }

        function saving() {
            var toast = new bootstrap.Toast(document.getElementById('liveToast'));
            $("#liveToastMsg").html("Saving... <img height='36' src='/images/az-busy.gif' >");
            toast.show();
        }

        function doneSaving() {
            toastMsg("Done.")
        }

    </script>

    @RenderBody()

    <div class="modal" id="checkSaveFirst" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Save First?</h5>
                </div>
                <div class="modal-body">
                    <div id="divSaveFirstDialog"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" onclick="saveFirst()" data-bs-dismiss="modal">Yes</button>
                    <button type="button" class="btn btn-secondary" onclick="doNotSave()" data-bs-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal" id="modalSavingError" tabindex="-2">
        <div class="modal-dialog">
            <div class="modal-header">
                <h5 class="modal-title">Save First?</h5>
            </div>
            <div class="modal-body">
                <div id="divErrorLog"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>

    <div class="toast-container position-fixed top-0 end-0">
        <div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-body" id="liveToastMsg">
                Saving...
            </div>
        </div>
    </div>

    @await RenderSectionAsync("Scripts", false)
</body>
</html>