@using System.Reflection
@using Cosmos.Cms.Common.Services.Configurations;
@using Microsoft.Extensions.Options;
@inject IOptions<CosmosConfig> options
@{
    var assemblyName = Assembly.GetExecutingAssembly().GetName();
    var title = (string)@ViewData["PageTitle"];
}
<!DOCTYPE HTML>
<html>
<head>
    <meta name="viewport" content="width=device-width" />

    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css" integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT" crossorigin="anonymous">

    <link rel="stylesheet" type="text/css" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css" />
    <link rel="stylesheet" type="text/css" href="~/lib/jquery-ui-combobox/jquery-ui-combobox.css" />

    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" integrity="sha512-9usAa10IRO0HhonpyAIVpjrylPvoDwiPUiKdWk5t3PyolY1cOd4DSE0Ga+ri4AuTroPR5aQvXU9xC6qOPnzFeg==" crossorigin="anonymous" referrerpolicy="no-referrer">
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />
    <link rel="stylesheet" type="text/css" href="~/css/site.css" />
    <link rel="stylesheet" type="text/css" href="~/css/CodeEditor.css" />
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-3.6.2.min.js" integrity="sha256-2krYZKh//PcchRtd+H+VyyQoZ/e3EcrkxhM8ycwASPA=" crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js" integrity="sha256-lSjKY0/srUM9BE3dPm+c4fBo1dky2v27Gdjm2uoZaL0=" crossorigin="anonymous"></script>
    <script src="~/lib/jquery-ui-combobox/jquery-ui-combobox.js"></script>
    <script src="~/ccms/js/TimeUtils.js"></script>

    <script type="text/javascript" src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
    <!-- http://www.daterangepicker.com/ -->
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>

</head>
<body style="margin:0px;padding:0px;background-color:#4d4d4d;">

    <nav id="ccmsNavMenu" class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">
                <img height="28" src="~/images/logos/cosmos-logo.png" /> Cosmos
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">

                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" id="btnSave" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            File
                        </a>
                        <ul class="dropdown-menu dropdown-menu-dark">
                            <li id="btnSaveChanges">
                                <a class="dropdown-item" title="Update existing page." onclick="bgEditClick('Save')" href="#">Save</a>
                            </li>
                            <li id="btnSaveAsDraft">
                                <a class="dropdown-item" title="Save as a new unpublished draft." onclick="bgEditClick('Draft')" href="#">Save new draft</a>
                            </li>
                            <li id="btnSaveAndPublish" style="display:none;">
                                <a class="dropdown-item" title="Save and publish now." onclick="bgEditClick('Publish')" href="#">Save and publish</a>
                            </li>
                            <li>
                                <a class="dropdown-item" onclick="bgEditClick('Close')">Close</a>
                            </li>
                            <li><hr class="dropdown-divider"></li>
                            <li id="btnPreview">
                                <a class="dropdown-item" onclick="bgEditClick('Preview')">Preview</a>
                            </li>
                            <li id="btnFiles">
                                <a class="dropdown-item" onclick=" bgEditClick('Files')">File manager</a>
                            </li>
                            <li id="btnSourceCode" style="display:none">
                                <a class="dropdown-item" href="/Code/Source" target="_blank">Source code</a>
                            </li>
                            <li id="btnCcmsCodeEditor" style="display:none">
                                <a class="dropdown-item" onclick="bgEditClick('Code')">Code editor</a>
                            </li>
                            <li id="btnCcmsHtmlEditor" style="display:none">
                                <a class="dropdown-item" onclick="bgEditClick('Html')">Html editor</a>
                            </li>
                            <li id="liBtnVersions" style="display:none">
                                <a id="btnVersions" class="dropdown-item" href="#" target="_blank">Page versions</a>
                            </li>
                            <li>
                                <a class="dropdown-item" title="Open public (publisher) website" href="@options.Value.SiteSettings.PublisherUrl" target="_blank">Public Website</a>
                            </li>
                        </ul>
                    </li>

                    <li id="ddInsert" class="nav-item dropdown" style="display:none">
                        <a class="nav-link dropdown-toggle" id="btnInsert" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            Insert
                        </a>
                        <ul class="dropdown-menu dropdown-menu-dark">
                            <li class="nav-item">
                                <button id="btnOpenLink" class="dropdown-item" type="button">Page Link</button>
                            </li>
                            <li class="nav-item">
                                <button id="btnOpenInsertFileLink" class="dropdown-item" type="button">File Link</button>
                            </li>
                            <li class="nav-item">
                                <button id="btnOpenInsertImage" class="dropdown-item" type="button">Image</button>
                            </li>
                        </ul>
                    </li>

                    <li class="nav-item" id="divAutoSave">
                        <div class="form-check form-switch mt-2 ms-3">
                            <input id="swAutoSave" class="form-check-input" type="checkbox" role="checkbox" checked>
                            <label id="lblAutoSave" style="font-size:0.8rem" class="form-check-label text-light" for="swAutoSave">Autosave (on)</label>
                        </div>
                    </li>
                    <li class="nav-item" id="msgSaving">
                        &nbsp; <div id="btnSavingStatus" class="btn btn-sm btn-secondary mt-1 ms-3 me-3" style="display:none">
                            <div id="spSaving" class="spinner-border spinner-border-sm text-light" role="status" style="display:none"></div>
                            <span id="btnSavingText">Saved</span>
                        </div>
                    </li>
                    <li class="nav-item">
                        <div id="msgSpecial" style="display:none"></div>
                        &nbsp;
                        <div id="spinLoading" class="btn btn-sm btn-primary mt-1 ms-3 me-3">
                            <div class="align-items-center text-light">
                                <strong>Loading...</strong>
                                <div class="spinner-border spinner-border-sm text-light" role="status"></div>
                            </div>
                        </div>
                    </li>
                </ul>
            </div>
            <div class="d-flex">
                <div id="divTitleGroup" class="input-group input-group-sm" style="display:none">
                    <span class="input-group-text" id="lblTitle" style="height:31px;">Title: </span>
                    <div class="form-control text-truncate" id="divTitle">@title</div>
                </div>
                <div id="divPublihedTitleGroup" class="input-group input-group-sm" style="display:none">
                    <div id="lblPublished" class="input-group-text" style="height:31px;">Published:</div>
                    <input class="form-control" name="tbPublished" id="tbPublished" placeholder="DRAFT" value="@((DateTimeOffset?)ViewData["Published"])" />
                </div>
            </div>
        </div>
    </nav>

    <div class="modal" id="checkSaveFirst" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Save First?</h5>
                </div>
                <div class="modal-body">
                    <div id="divSaveFirstDialog"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" onclick="saveFirst()" data-bs-dismiss="modal">Yes</button>
                    <button type="button" class="btn btn-secondary" onclick="doNotSave()" data-bs-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal" id="modalChangeTitle" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content bg-dark text-light">
                <div class="modal-header">
                    <h5 id="modalChgTitleHeader" class="modal-title">Change Title</h5>
                </div>
                <div class="modal-body">
                    <form id="frmChangeTitle">
                        <div class="form-group">
                            <label id="lblCurrentTitle" for="currentTitle" title="Showing current title" class="control-label">Current title:</label>
                            <div class="form-control" id="currentTitle"></div>
                        </div>
                        <div class="form-group">
                            <label id="lblNewTitle" for="newTitle" class="control-label">New title:</label>
                            <input class="form-control" required id="newTitle" title="Enter new title" />
                            <span id="newTitleValidation" class="btn btn-sm btn-danger" style="display:none"></span>
                        </div>
                        <div id="divUrlTitleExamples" style="display:none">
                            <p>Example URLs:</p>
                            <label id="lblCurrentTitle" for="currentTitle" title="Showing current title" class="control-label">Example:</label>
                            <div class="form-control" id="currentTitle">My Title</div>
                            <label id="lblCurrentTitle" for="currentTitle" title="Showing current title" class="control-label">Example title with a parent page:</label>
                            <div class="form-control" id="currentTitle">My Title/Images</div>
                            <label id="lblCurrentTitle" for="currentTitle" title="Showing current title" class="control-label">Example title with two parent pages:</label>
                            <div class="form-control" id="currentTitle">My Title/Images/Mountain Tops</div>
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-secondary">Change and Save</button>
                            <button id="btnCancelChgTitle" type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div class="modal" id="modalSavingError" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-header">
                <h5 class="modal-title">Save First?</h5>
            </div>
            <div class="modal-body bg-dark text-light">
                <div id="divErrorLog" class="text-light"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>

    <div class="modal" id="pickPageModal" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content bg-dark text-white">
                <div class="modal-header">
                    <h4 class="text-light">
                        Insert Page Link
                    </h4>
                </div>
                <div class="modal-body">
                    <div class="container-fluid">
                        <div class="row mb-3">
                            <label for="combobox">Page search:</label>
                            <input id="combobox" placeholder="Search for a page ..." type="text" class="form-control bg-dark text-light custom-combobox" aria-label="Type to search for a page." style="height:26px">
                        </div>
                        <div class="row mb-3" id="pageSelectResults">
                            <div class="col-9">
                                <div id="pageStatus" class="text-light" style="display:none;font-size:0.8rem;">
                                </div>
                            </div>
                            <div class="col-3">
                                <a id="btnOpenLink" href="#" target="_blank" class="btn btn-sm btn-secondary" style="display:none">Versions <i class="fa-solid fa-circle-arrow-right"></i></a>
                            </div>
                        </div>
                        <div id="divLinkDetails" style="display:none">
                            <div class="row mb-3">
                                <label for="inputLinkText" class="form-label">Link text:</label>
                                <input id="inputLinkText" type="text" class="form-control form-control-sm">
                                <span id="inputLinkTextError" class="badge badge-danger" style="display:none">Link text is required.</span>
                            </div>

                        </div>
                    </div>
                </div>
                <div class="modal-fooder">
                    <div class="container-fluid">
                        <div class="row mb-3">
                            <div class="col-auto ms-5">
                                <button type="button" class="btn btn-sm btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                <button id="btnApplyLink" type="button" class="btn btn-sm btn-primary" disabled>Apply <i class="fa-solid fa-circle-arrow-right"></i></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal" id="modalSelectFile" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content bg-dark text-white">
                <div class="modal-body" style="height: 80vh;position:relative;">
                    <div style="height:60px;width:100%;">
                        <button type="button" class="btn btn-sm btn-primary" data-bs-dismiss="modal">Cancel</button>
                        <button id="btnSelectFileAndClose" type="button" class="btn btn-sm btn-primary" data-bs-dismiss="modal" disabled>Select and Close</button>
                        <div id="spinFileMgrLoading" class="btn btn-sm btn-primary mt-1 ms-3 me-3">
                            <div class="align-items-center text-light">
                                <strong>Loading...</strong>
                                <div class="spinner-border spinner-border-sm text-light" role="status"></div>
                            </div>
                        </div>
                    </div>
                    <iframe id="iframeSelectFile" class="m-fileselector-container" style="height: 100%; width: 100%;"></iframe>
                </div>
            </div>
        </div>
    </div>

    @RenderBody()

    <script>

        // CONSTANTS
        // Modal and toast definitions
        const modalChangeTitle = new bootstrap.Modal(document.getElementById('modalChangeTitle'));
        const checkFirstModal = new bootstrap.Modal(document.getElementById('checkSaveFirst'));
        const pickPageModal = new bootstrap.Modal(document.getElementById('pickPageModal'));
        const modalSelectFile = new bootstrap.Modal(document.getElementById('modalSelectFile'));
        const toast = new bootstrap.Toast(document.getElementById('liveToast'));
        const fileBaseUrl = "@(options.Value.SiteSettings.BlobPublicUrl.TrimEnd('/'))";

        // VARIABLES
        // Function to fire after modal action
        let next;
        let fileMgrPopup = null;
        let selectedFile = "";
        let lastPublished = "@(((DateTimeOffset?)ViewData["LastPubDateTime"]))";
        let autoSaveSwLastStatus;
        // Sometimes auto save switch is on, but something is going on
        // where auto save should not save. Example:right in the middle of
        // changing the "title".
        // When set to true, autosave works. False means it is temporarily overridden and off.
        let autoSaveOn = true;
        // Is this an article model?
        // If so check to see if title/url can change (not home page)
        // and if the title needs to be checked prior to save.
        let isArticle = @((Model != null && (Model.GetType() == typeof(EditCodePostModel) || Model.GetType() == typeof(HtmlEditorViewModel))).ToString().ToLower());
        // Selected anchor data
        let selectedAnchorData;

        function openSelectFileModal(mode, saveFunction) {

            next = saveFunction;
            let id = $("#ArticleNumber").val();
            let url = "@Url.Action("Index", "FileManager")";

            if (typeof (id) !== "undefined" && id !== null & id !== "") {
                url += "?target=pub/articles/" + id;
            } else {
                url += "?target=";
            }

            if (mode === "image") {
                $('#iframeSelectFile').attr('src', url + '&selectOne=true&imagesOnly=true&');
            } else {
                $('#iframeSelectFile').attr('src', url + '&selectOne=true&');
            }

            modalSelectFile.show();

        }

        function getAutoSave() {
            return $("#swAutoSave").is(":checked") && autoSaveOn;
        }

        function showSaving() {
            $("#spSaving").show();
            $("#btnSavingText").html("Saving...");
        }

        function showSaved() {
            $("#spSaving").hide();
            $("#btnSavingText").html("Saved");
        }

        function bgEditClick(command) {

            switch (command) {
                case "Draft":
                    $("#tbPublished").val("");
                    $("#Published").val("");
                    $("#SaveAsNewVersion").val("true");
                    $("#frmSave").submit();
                    break;
                case "Save":
                    $("#SaveAsNewVersion").val("false");
                    $("#frmSave").submit();
                    break;
                case "Publish":
                    var now = new Date();
                    $("#tbPublished").val(now.toLocaleString());
                    $("#Published").val(now.toLocaleString());

                    $("#SaveAsNewVersion").val("false");
                    $("#frmSave").submit();
                    break
                case "Files":
                    var id = $("#ArticleNumber").val();
                    var url = "@Url.Action("Index", "FileManager")";
                    if (typeof (id) !== "undefined" && id !== null & id !== "") {
                        url += "?target=pub/articles/" + id;
                    }

                    fileMgrPopup = window.open(url, '_blank', 'height=510,width=1200,menubar=no,location=no,status=no,titlebar=no,toolbar=no');
                    break;
                default:
                    // Executes functions specific to this editor
                    bgEditClickCustom(command);
                    break;
            }
        }

        function saveFirst() {
            saveChanges(checkFirstModal, next);
        }

        function doNotSave() {
            checkFirstModal.hide();
            next();
        }

        function getLocalTimeZone() {
            const datetime = new Date();
            const dateTimeString = datetime.toString();
            const timezone = dateTimeString.substring(dateTimeString.indexOf("(") - 1);
            return timezone;
        }

        function savePublishDateTime() {
            // Save date/time
            var dateTimeValue = $('#tbPublished').val();

            if ($("#Published").val() !== dateTimeValue) {
                $("#pendingChangesBadge").show();
            }

            // Note, this saves the date/time using local time (of the user's computer).
            // The server stores this as UTC time.
            if (dateTimeValue !== null && dateTimeValue !== "null" && dateTimeValue !== "") {
                var datetime = new Date(dateTimeValue);
                var utcString = datetime.toUTCString();
                $("#Published").val(utcString);
                $("#btnPublish").html("Published");
            } else {
                $("#btnPublish").html("DRAFT");
                $("#Published").val("");
            }
        }

        function btnChangeTitle() {
            return false;
        }

        $(document).ready(function () {

            var startDate;
            if (lastPublished === "") {
                startDate = new Date();
            }
            else {
                startDate = new Date(lastPublished);
            }

            $('#tbPublished').daterangepicker({
                autoUpdateInput: false,
                timePicker: true,
                singleDatePicker: true,
                showDropdowns: true,
                minDate: startDate,
                locale: {
                    format: 'MM/DD/YYYY hh:mm A'
                }
            });

            $('#tbPublished').on('apply.daterangepicker', function (ev, picker) {
                $('#tbPublished').val(picker.startDate.format('MM/DD/YYYY hh:mm A'));
            });

            $("#btnSave").click(function () {
                if ($('#tbPublished').val() === "") {
                    $("#btnSaveAsDraft").hide();
                    $("#btnSaveAndPublish").show();
                } else {
                    $("#btnSaveAsDraft").show();
                    $("#btnSaveAndPublish").hide();
                }
            });

            $("#swAutoSave").click(function () {
                if ($("#swAutoSave").is(":checked")) {
                    $("#lblAutoSave").html("Autosave (on)");
                    autoSaveOn = true;
                } else {
                    $("#lblAutoSave").html("Autosave (off)");
                    autoSaveOn = false;
                }
            });

            $("#divTitleGroup").click(function () {
                $("#newTitleValidation").html("");
                $("#newTitleValidation").hide();

                $("#newTitle").val("");
                $("#currentTitle").html($("#Title").val());
                autoSaveOn = false;
                modalChangeTitle.show();
            });

            $("#btnCancelChgTitle").click(function (e) {
                autoSaveOn = true;
            });

            $("#frmChangeTitle").submit(function (e) {

                e.preventDefault();

                let urlPath = $("#UrlPath").val();
                let title = $("#newTitle").val();

                // Check to see if this is root or home page and check title
                if (urlPath === "root" && title.includes("/")) {
                    $("#newTitleValidation").html('The home page cannot contain the character "/" in the title.');
                    $("#newTitleValidation").show();
                    return;
                }

                let articleNumber = $("#ArticleNumber").val();
                let data = {
                    "articleNumber": articleNumber,
                    "title": title
                };

                if (isArticle === true) {
                    // For "Articles" only, validate that the title hasn't already been taken.
                    $.post("@Url.Action("CheckTitle", "Editor")", data, function (result) {
                        if (result === true) {
                            let status = getAutoSave();
                            if (status) {
                                // Turn off auto save for the moment.
                                $('#swAutoSave').prop('checked', false); // Unchecks it
                            }
                            $("#newTitleValidation").html("");
                            $("#divTitle").html(title);
                            $("#Title").val(title);
                            saveChanges(null, null);
                            $('#swAutoSave').prop('checked', status); // Return to last status
                        } else {
                            $("#newTitleValidation").show();
                            $("#newTitleValidation").html(result);
                        }
                    });
                } else {
                    $("#newTitleValidation").html("");
                    $("#divTitle").html(title);
                    $("#Title").val(title);
                    saveChanges(null, null);
                }
                autoSaveOn = true;
                modalChangeTitle.hide();
            });

            // COMBOBOX
            $("#combobox").combobox({
                source: function (request, response) {
                    $("#btnOpen").prop('disabled', true);
                    $("#pageStatus").hide();
                    $("#divLinkDetails").hide();
                    $.ajax({
                        url: "@Url.Action("GetArticleList","Editor")",
                        dataType: "json",
                        data: {
                            term: request.term
                        },
                        success: function (data) {
                            var results = [];
                            $.each(data, function (index, entity) {
                                var item = { label: entity.Title, value: entity.Title, url: entity.UrlPath, updated: entity.Updated, id: entity.ArticleNumber, published: entity.LastPublished };
                                results.push(item);
                            });
                            response(results);
                        }
                    });
                },
                focus: function () {
                    // prevent value inserted on focus
                    return false;
                },
                select: function (event, ui) {

                    if (ui.item.published === null || ui.item.published === "") {
                        $("#pageStatus").html("Status: - DRAFT - ");
                    } else {
                        const date = new Date(ui.item.published);
                        $("#pageStatus").html("Publihed: " + date.toUTCString());
                    }

                    var titleArray = ui.item.label.split('/');

                    $("#inputLinkText").val(titleArray[titleArray.length - 1]);

                    $("#pageStatus").show();
                    $("#divLinkDetails").show();
                    $("#btnOpenLink").attr("href", "@Url.Action("Versions", "Editor")/" + ui.item.id);
                    $("#btnApplyLink").prop('disabled', false);
                    selectedAnchorData = ui.item; // Save this as the last selected item
                    return true;
                }
            });

            $("#btnOpenLink").click(function (e) {
                if (openPickPageModal) {
                    openPickPageModal();
                }
                else {
                    alert("Could not find openPickPageModal().");
                }
            });

            $("#btnApplyLink").click(function () {
                if (insertPageLink) {
                    insertPageLink();
                } else {
                    alert("insertPageLink() not found.");
                }
            });

            $("#inputLinkText").focus(function () {
                clearFileMgrPaths();
                $("#inputLinkTextError").hide();
            });

            $("#iframeSelectFile").on("load", function () {
                clearFileMgrPaths();
                $("#spinFileMgrLoading").hide();
            });

            $("#btnSelectFileAndClose").click(function () {
                // 'next' is the function that needs to be executed after close.
                let iframe = document.getElementById("iframeSelectFile");
                let iframeWin = iframe.contentWindow || iframe.contentDocument.parentWindow;
                let p = iframeWin.paths;
                next(p[0]);
                return true;
            });
        });

        // Displays a 3 second message in a bootstrap toast.
        function toastMsg(message) {

            $("#liveToastMsg").html(message);
            toast.show();
            setTimeout(function () {
                toast.hide();
            }, 2000);
        }

        function saving() {
            //var toast = new bootstrap.Toast(document.getElementById('liveToast'));
            //$("#liveToastMsg").html("Saving... <img height='36' src='/images/az-busy.gif' >");
            //toast.show();
            showSaving();
        }

        function doneSaving() {
            showSaved();
        }

        function clearFileMgrPaths() {
            let iframe = document.getElementById("iframeSelectFile");
            let iframeWin = iframe.contentWindow || iframe.contentDocument.parentWindow;
            iframeWin.clearPaths();
            iframeWin.reloadPaths();
        }


    </script>

    @await RenderSectionAsync("Scripts", false)
</body>
</html>
